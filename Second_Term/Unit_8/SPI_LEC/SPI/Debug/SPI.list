
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e44  08000e44  00010e4c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e44  08000e44  00010e4c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e44  08000e4c  00010e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e44  08000e44  00010e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e48  08000e48  00010e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000e4c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000e4c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014e3  00000000  00000000  00010e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000879  00000000  00000000  00012358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000b34  00000000  00000000  00012bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00013708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  000138f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000b7a  00000000  00000000  00013a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017c7  00000000  00000000  000145fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000068cb  00000000  00000000  00015dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001c68c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005e4  00000000  00000000  0001c6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e04 	.word	0x08000e04

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e04 	.word	0x08000e04

08000170 <MDIO_voidSetPinDirection>:
#include "../../LIP/BIT_MATH.h"
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DIO_private.h"
void MDIO_voidSetPinDirection  ( u8 Copy_u8Port , u8 Copy_u8Pin, u8 u8Copy_u8Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
switch(Copy_u8Port)	{
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b03      	cmp	r3, #3
 8000186:	f000 8082 	beq.w	800028e <MDIO_voidSetPinDirection+0x11e>
 800018a:	2b03      	cmp	r3, #3
 800018c:	f300 80c0 	bgt.w	8000310 <MDIO_voidSetPinDirection+0x1a0>
 8000190:	2b01      	cmp	r3, #1
 8000192:	d002      	beq.n	800019a <MDIO_voidSetPinDirection+0x2a>
 8000194:	2b02      	cmp	r3, #2
 8000196:	d03e      	beq.n	8000216 <MDIO_voidSetPinDirection+0xa6>
			GPIOC->CRH&=~(0b1111<<4*Copy_u8Pin)	;
			GPIOC->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
		}
	break;
}
}
 8000198:	e0ba      	b.n	8000310 <MDIO_voidSetPinDirection+0x1a0>
	if(Copy_u8Pin<=7){
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b07      	cmp	r3, #7
 800019e:	d817      	bhi.n	80001d0 <MDIO_voidSetPinDirection+0x60>
	GPIOA->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 80001a0:	4b5e      	ldr	r3, [pc, #376]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	79ba      	ldrb	r2, [r7, #6]
 80001a6:	0092      	lsls	r2, r2, #2
 80001a8:	210f      	movs	r1, #15
 80001aa:	fa01 f202 	lsl.w	r2, r1, r2
 80001ae:	43d2      	mvns	r2, r2
 80001b0:	4611      	mov	r1, r2
 80001b2:	4a5a      	ldr	r2, [pc, #360]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001b4:	400b      	ands	r3, r1
 80001b6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80001b8:	4b58      	ldr	r3, [pc, #352]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	7979      	ldrb	r1, [r7, #5]
 80001be:	79ba      	ldrb	r2, [r7, #6]
 80001c0:	0092      	lsls	r2, r2, #2
 80001c2:	fa01 f202 	lsl.w	r2, r1, r2
 80001c6:	4611      	mov	r1, r2
 80001c8:	4a54      	ldr	r2, [pc, #336]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001ca:	430b      	orrs	r3, r1
 80001cc:	6013      	str	r3, [r2, #0]
	break;
 80001ce:	e09a      	b.n	8000306 <MDIO_voidSetPinDirection+0x196>
	else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 80001d0:	79bb      	ldrb	r3, [r7, #6]
 80001d2:	2b07      	cmp	r3, #7
 80001d4:	f240 8097 	bls.w	8000306 <MDIO_voidSetPinDirection+0x196>
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	2b0f      	cmp	r3, #15
 80001dc:	f200 8093 	bhi.w	8000306 <MDIO_voidSetPinDirection+0x196>
		Copy_u8Pin-=8;
 80001e0:	79bb      	ldrb	r3, [r7, #6]
 80001e2:	3b08      	subs	r3, #8
 80001e4:	71bb      	strb	r3, [r7, #6]
		GPIOA->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 80001e6:	4b4d      	ldr	r3, [pc, #308]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	210f      	movs	r1, #15
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a48      	ldr	r2, [pc, #288]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001fa:	400b      	ands	r3, r1
 80001fc:	6053      	str	r3, [r2, #4]
		GPIOA->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80001fe:	4b47      	ldr	r3, [pc, #284]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	7979      	ldrb	r1, [r7, #5]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	4611      	mov	r1, r2
 800020e:	4a43      	ldr	r2, [pc, #268]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 8000210:	430b      	orrs	r3, r1
 8000212:	6053      	str	r3, [r2, #4]
	break;
 8000214:	e077      	b.n	8000306 <MDIO_voidSetPinDirection+0x196>
	if(Copy_u8Pin<=7){
 8000216:	79bb      	ldrb	r3, [r7, #6]
 8000218:	2b07      	cmp	r3, #7
 800021a:	d817      	bhi.n	800024c <MDIO_voidSetPinDirection+0xdc>
		GPIOB->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 800021c:	4b40      	ldr	r3, [pc, #256]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	79ba      	ldrb	r2, [r7, #6]
 8000222:	0092      	lsls	r2, r2, #2
 8000224:	210f      	movs	r1, #15
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	43d2      	mvns	r2, r2
 800022c:	4611      	mov	r1, r2
 800022e:	4a3c      	ldr	r2, [pc, #240]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000230:	400b      	ands	r3, r1
 8000232:	6013      	str	r3, [r2, #0]
		GPIOB->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 8000234:	4b3a      	ldr	r3, [pc, #232]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	7979      	ldrb	r1, [r7, #5]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0092      	lsls	r2, r2, #2
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	4611      	mov	r1, r2
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000246:	430b      	orrs	r3, r1
 8000248:	6013      	str	r3, [r2, #0]
	break;
 800024a:	e05e      	b.n	800030a <MDIO_voidSetPinDirection+0x19a>
		else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	2b07      	cmp	r3, #7
 8000250:	d95b      	bls.n	800030a <MDIO_voidSetPinDirection+0x19a>
 8000252:	79bb      	ldrb	r3, [r7, #6]
 8000254:	2b0f      	cmp	r3, #15
 8000256:	d858      	bhi.n	800030a <MDIO_voidSetPinDirection+0x19a>
			Copy_u8Pin-=8;
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	3b08      	subs	r3, #8
 800025c:	71bb      	strb	r3, [r7, #6]
			GPIOB->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 800025e:	4b30      	ldr	r3, [pc, #192]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	210f      	movs	r1, #15
 8000268:	fa01 f202 	lsl.w	r2, r1, r2
 800026c:	43d2      	mvns	r2, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a2b      	ldr	r2, [pc, #172]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000272:	400b      	ands	r3, r1
 8000274:	6053      	str	r3, [r2, #4]
			GPIOB->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	7979      	ldrb	r1, [r7, #5]
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	0092      	lsls	r2, r2, #2
 8000280:	fa01 f202 	lsl.w	r2, r1, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4a26      	ldr	r2, [pc, #152]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000288:	430b      	orrs	r3, r1
 800028a:	6053      	str	r3, [r2, #4]
	break;
 800028c:	e03d      	b.n	800030a <MDIO_voidSetPinDirection+0x19a>
	if(Copy_u8Pin<=7){
 800028e:	79bb      	ldrb	r3, [r7, #6]
 8000290:	2b07      	cmp	r3, #7
 8000292:	d817      	bhi.n	80002c4 <MDIO_voidSetPinDirection+0x154>
		GPIOC->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 8000294:	4b23      	ldr	r3, [pc, #140]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	79ba      	ldrb	r2, [r7, #6]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	210f      	movs	r1, #15
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	43d2      	mvns	r2, r2
 80002a4:	4611      	mov	r1, r2
 80002a6:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002a8:	400b      	ands	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
		GPIOC->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	7979      	ldrb	r1, [r7, #5]
 80002b2:	79ba      	ldrb	r2, [r7, #6]
 80002b4:	0092      	lsls	r2, r2, #2
 80002b6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ba:	4611      	mov	r1, r2
 80002bc:	4a19      	ldr	r2, [pc, #100]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002be:	430b      	orrs	r3, r1
 80002c0:	6013      	str	r3, [r2, #0]
	break;
 80002c2:	e024      	b.n	800030e <MDIO_voidSetPinDirection+0x19e>
		else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	2b07      	cmp	r3, #7
 80002c8:	d921      	bls.n	800030e <MDIO_voidSetPinDirection+0x19e>
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d81e      	bhi.n	800030e <MDIO_voidSetPinDirection+0x19e>
			Copy_u8Pin-=8;
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	3b08      	subs	r3, #8
 80002d4:	71bb      	strb	r3, [r7, #6]
			GPIOC->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	210f      	movs	r1, #15
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	4611      	mov	r1, r2
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002ea:	400b      	ands	r3, r1
 80002ec:	6053      	str	r3, [r2, #4]
			GPIOC->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	7979      	ldrb	r1, [r7, #5]
 80002f4:	79ba      	ldrb	r2, [r7, #6]
 80002f6:	0092      	lsls	r2, r2, #2
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 8000300:	430b      	orrs	r3, r1
 8000302:	6053      	str	r3, [r2, #4]
	break;
 8000304:	e003      	b.n	800030e <MDIO_voidSetPinDirection+0x19e>
	break;
 8000306:	bf00      	nop
 8000308:	e002      	b.n	8000310 <MDIO_voidSetPinDirection+0x1a0>
	break;
 800030a:	bf00      	nop
 800030c:	e000      	b.n	8000310 <MDIO_voidSetPinDirection+0x1a0>
	break;
 800030e:	bf00      	nop
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40010800 	.word	0x40010800
 8000320:	40010c00 	.word	0x40010c00
 8000324:	40011000 	.word	0x40011000

08000328 <MDIO_voidSetPinValue>:
void MDIO_voidSetPinValue      ( u8 Copy_u8Port , u8 Copy_u8Pin,u8 u8Copy_u8Value){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	460b      	mov	r3, r1
 8000334:	71bb      	strb	r3, [r7, #6]
 8000336:	4613      	mov	r3, r2
 8000338:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b03      	cmp	r3, #3
 800033e:	d040      	beq.n	80003c2 <MDIO_voidSetPinValue+0x9a>
 8000340:	2b03      	cmp	r3, #3
 8000342:	dc60      	bgt.n	8000406 <MDIO_voidSetPinValue+0xde>
 8000344:	2b01      	cmp	r3, #1
 8000346:	d002      	beq.n	800034e <MDIO_voidSetPinValue+0x26>
 8000348:	2b02      	cmp	r3, #2
 800034a:	d01d      	beq.n	8000388 <MDIO_voidSetPinValue+0x60>
			}
			break;


	}
}
 800034c:	e05b      	b.n	8000406 <MDIO_voidSetPinValue+0xde>
		if(u8Copy_u8Value==DIO_HIGH){
 800034e:	797b      	ldrb	r3, [r7, #5]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d10a      	bne.n	800036a <MDIO_voidSetPinValue+0x42>
			SET_BIT(GPIOA->ODR,Copy_u8Pin);
 8000354:	4b2e      	ldr	r3, [pc, #184]	; (8000410 <MDIO_voidSetPinValue+0xe8>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	79ba      	ldrb	r2, [r7, #6]
 800035a:	2101      	movs	r1, #1
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	4611      	mov	r1, r2
 8000362:	4a2b      	ldr	r2, [pc, #172]	; (8000410 <MDIO_voidSetPinValue+0xe8>)
 8000364:	430b      	orrs	r3, r1
 8000366:	60d3      	str	r3, [r2, #12]
		break;
 8000368:	e048      	b.n	80003fc <MDIO_voidSetPinValue+0xd4>
		else if(u8Copy_u8Value==DIO_LOW){
 800036a:	797b      	ldrb	r3, [r7, #5]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d145      	bne.n	80003fc <MDIO_voidSetPinValue+0xd4>
			CLR_BIT(GPIOA->ODR,Copy_u8Pin);
 8000370:	4b27      	ldr	r3, [pc, #156]	; (8000410 <MDIO_voidSetPinValue+0xe8>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	79ba      	ldrb	r2, [r7, #6]
 8000376:	2101      	movs	r1, #1
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	43d2      	mvns	r2, r2
 800037e:	4611      	mov	r1, r2
 8000380:	4a23      	ldr	r2, [pc, #140]	; (8000410 <MDIO_voidSetPinValue+0xe8>)
 8000382:	400b      	ands	r3, r1
 8000384:	60d3      	str	r3, [r2, #12]
		break;
 8000386:	e039      	b.n	80003fc <MDIO_voidSetPinValue+0xd4>
			if(u8Copy_u8Value==DIO_HIGH){
 8000388:	797b      	ldrb	r3, [r7, #5]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d10a      	bne.n	80003a4 <MDIO_voidSetPinValue+0x7c>
				SET_BIT(GPIOB->ODR,Copy_u8Pin);
 800038e:	4b21      	ldr	r3, [pc, #132]	; (8000414 <MDIO_voidSetPinValue+0xec>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	79ba      	ldrb	r2, [r7, #6]
 8000394:	2101      	movs	r1, #1
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a1d      	ldr	r2, [pc, #116]	; (8000414 <MDIO_voidSetPinValue+0xec>)
 800039e:	430b      	orrs	r3, r1
 80003a0:	60d3      	str	r3, [r2, #12]
			break;
 80003a2:	e02d      	b.n	8000400 <MDIO_voidSetPinValue+0xd8>
			else if(u8Copy_u8Value==DIO_LOW){
 80003a4:	797b      	ldrb	r3, [r7, #5]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d12a      	bne.n	8000400 <MDIO_voidSetPinValue+0xd8>
				CLR_BIT(GPIOB->ODR,Copy_u8Pin);
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MDIO_voidSetPinValue+0xec>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	79ba      	ldrb	r2, [r7, #6]
 80003b0:	2101      	movs	r1, #1
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a16      	ldr	r2, [pc, #88]	; (8000414 <MDIO_voidSetPinValue+0xec>)
 80003bc:	400b      	ands	r3, r1
 80003be:	60d3      	str	r3, [r2, #12]
			break;
 80003c0:	e01e      	b.n	8000400 <MDIO_voidSetPinValue+0xd8>
			if(u8Copy_u8Value==DIO_HIGH){
 80003c2:	797b      	ldrb	r3, [r7, #5]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d10a      	bne.n	80003de <MDIO_voidSetPinValue+0xb6>
				SET_BIT(GPIOC->ODR,Copy_u8Pin);
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MDIO_voidSetPinValue+0xf0>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	79ba      	ldrb	r2, [r7, #6]
 80003ce:	2101      	movs	r1, #1
 80003d0:	fa01 f202 	lsl.w	r2, r1, r2
 80003d4:	4611      	mov	r1, r2
 80003d6:	4a10      	ldr	r2, [pc, #64]	; (8000418 <MDIO_voidSetPinValue+0xf0>)
 80003d8:	430b      	orrs	r3, r1
 80003da:	60d3      	str	r3, [r2, #12]
			break;
 80003dc:	e012      	b.n	8000404 <MDIO_voidSetPinValue+0xdc>
			else if(u8Copy_u8Value==DIO_LOW){
 80003de:	797b      	ldrb	r3, [r7, #5]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10f      	bne.n	8000404 <MDIO_voidSetPinValue+0xdc>
				CLR_BIT(GPIOC->ODR,Copy_u8Pin);
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MDIO_voidSetPinValue+0xf0>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	79ba      	ldrb	r2, [r7, #6]
 80003ea:	2101      	movs	r1, #1
 80003ec:	fa01 f202 	lsl.w	r2, r1, r2
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a08      	ldr	r2, [pc, #32]	; (8000418 <MDIO_voidSetPinValue+0xf0>)
 80003f6:	400b      	ands	r3, r1
 80003f8:	60d3      	str	r3, [r2, #12]
			break;
 80003fa:	e003      	b.n	8000404 <MDIO_voidSetPinValue+0xdc>
		break;
 80003fc:	bf00      	nop
 80003fe:	e002      	b.n	8000406 <MDIO_voidSetPinValue+0xde>
			break;
 8000400:	bf00      	nop
 8000402:	e000      	b.n	8000406 <MDIO_voidSetPinValue+0xde>
			break;
 8000404:	bf00      	nop
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00
 8000418:	40011000 	.word	0x40011000

0800041c <EXTI0_IRQHandler>:
}



/****************************************** IRQ ************************************************************/
void EXTI0_IRQHandler(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
//pending request clear by write 1
	EXTI->EXTI_PR|=1<<0;
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI0_IRQHandler+0x1c>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI0_IRQHandler+0x1c>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI0_IRQHandler+0x20>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	2000001c 	.word	0x2000001c

08000440 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<1;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI1_IRQHandler+0x1c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <EXTI1_IRQHandler+0x1c>)
 800044a:	f043 0302 	orr.w	r3, r3, #2
 800044e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[1]();
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <EXTI1_IRQHandler+0x20>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4798      	blx	r3
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	2000001c 	.word	0x2000001c

08000464 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<2;
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <EXTI2_IRQHandler+0x1c>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <EXTI2_IRQHandler+0x1c>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[2]();
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <EXTI2_IRQHandler+0x20>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	4798      	blx	r3
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40010400 	.word	0x40010400
 8000484:	2000001c 	.word	0x2000001c

08000488 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<3;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <EXTI3_IRQHandler+0x1c>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <EXTI3_IRQHandler+0x1c>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[3]();
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <EXTI3_IRQHandler+0x20>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4798      	blx	r3
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40010400 	.word	0x40010400
 80004a8:	2000001c 	.word	0x2000001c

080004ac <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<4;
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <EXTI4_IRQHandler+0x1c>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <EXTI4_IRQHandler+0x1c>)
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[4]();
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <EXTI4_IRQHandler+0x20>)
 80004be:	691b      	ldr	r3, [r3, #16]
 80004c0:	4798      	blx	r3
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40010400 	.word	0x40010400
 80004cc:	2000001c 	.word	0x2000001c

080004d0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
if(EXTI->EXTI_PR&1<<5){EXTI->EXTI_PR|=1<<5;GP_IRQ_CallBack[5]();}
 80004d4:	4b26      	ldr	r3, [pc, #152]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	f003 0320 	and.w	r3, r3, #32
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d008      	beq.n	80004f2 <EXTI9_5_IRQHandler+0x22>
 80004e0:	4b23      	ldr	r3, [pc, #140]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a22      	ldr	r2, [pc, #136]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 80004e6:	f043 0320 	orr.w	r3, r3, #32
 80004ea:	6153      	str	r3, [r2, #20]
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <EXTI9_5_IRQHandler+0xa4>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<6){EXTI->EXTI_PR|=1<<6;GP_IRQ_CallBack[6]();}
 80004f2:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d008      	beq.n	8000510 <EXTI9_5_IRQHandler+0x40>
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 8000504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <EXTI9_5_IRQHandler+0xa4>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<7){EXTI->EXTI_PR|=1<<7;GP_IRQ_CallBack[7]();}
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000518:	2b00      	cmp	r3, #0
 800051a:	d008      	beq.n	800052e <EXTI9_5_IRQHandler+0x5e>
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a13      	ldr	r2, [pc, #76]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 8000522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000526:	6153      	str	r3, [r2, #20]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <EXTI9_5_IRQHandler+0xa4>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<8){EXTI->EXTI_PR|=1<<8;GP_IRQ_CallBack[8]();}
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000536:	2b00      	cmp	r3, #0
 8000538:	d008      	beq.n	800054c <EXTI9_5_IRQHandler+0x7c>
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 8000540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <EXTI9_5_IRQHandler+0xa4>)
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<9){EXTI->EXTI_PR|=1<<9;GP_IRQ_CallBack[9]();}
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000554:	2b00      	cmp	r3, #0
 8000556:	d008      	beq.n	800056a <EXTI9_5_IRQHandler+0x9a>
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <EXTI9_5_IRQHandler+0xa0>)
 800055e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000562:	6153      	str	r3, [r2, #20]
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <EXTI9_5_IRQHandler+0xa4>)
 8000566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000568:	4798      	blx	r3

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40010400 	.word	0x40010400
 8000574:	2000001c 	.word	0x2000001c

08000578 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR&1<<10){EXTI->EXTI_PR|=1<<10;GP_IRQ_CallBack[10]();}
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000584:	2b00      	cmp	r3, #0
 8000586:	d008      	beq.n	800059a <EXTI15_10_IRQHandler+0x22>
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 800058e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000592:	6153      	str	r3, [r2, #20]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <EXTI15_10_IRQHandler+0xc0>)
 8000596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000598:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<11){EXTI->EXTI_PR|=1<<11;GP_IRQ_CallBack[11]();}
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d008      	beq.n	80005b8 <EXTI15_10_IRQHandler+0x40>
 80005a6:	4b23      	ldr	r3, [pc, #140]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a22      	ldr	r2, [pc, #136]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <EXTI15_10_IRQHandler+0xc0>)
 80005b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b6:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<12){EXTI->EXTI_PR|=1<<12;GP_IRQ_CallBack[12]();}
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d008      	beq.n	80005d6 <EXTI15_10_IRQHandler+0x5e>
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ce:	6153      	str	r3, [r2, #20]
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <EXTI15_10_IRQHandler+0xc0>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<13){EXTI->EXTI_PR|=1<<13;GP_IRQ_CallBack[13]();}
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d008      	beq.n	80005f4 <EXTI15_10_IRQHandler+0x7c>
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <EXTI15_10_IRQHandler+0xc0>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f2:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<14){EXTI->EXTI_PR|=1<<14;GP_IRQ_CallBack[14]();}
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d008      	beq.n	8000612 <EXTI15_10_IRQHandler+0x9a>
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <EXTI15_10_IRQHandler+0xc0>)
 800060e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000610:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<15){EXTI->EXTI_PR|=1<<15;GP_IRQ_CallBack[15]();}
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d008      	beq.n	8000630 <EXTI15_10_IRQHandler+0xb8>
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <EXTI15_10_IRQHandler+0xbc>)
 8000624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b03      	ldr	r3, [pc, #12]	; (8000638 <EXTI15_10_IRQHandler+0xc0>)
 800062c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800062e:	4798      	blx	r3

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40010400 	.word	0x40010400
 8000638:	2000001c 	.word	0x2000001c

0800063c <RCC_voidInitSysClock>:
//1110: PLL input clock x 16
//1111: PLL input clock x 16
const u8 Pll_MUL[16]={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16};

void RCC_voidInitSysClock(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
#elif RCC_CLOCK_TYPE == RCC_HSE_RC
	RCC_CR = 0x00050000; /* Enable HSE with bypass */
	RCC_CFGR = 0x00000001;

#elif RCC_CLOCK_TYPE == RCC_HSI
	RCC_CR = 0x00000081; /* Enable HSI + Trimming = 0 */
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <RCC_voidInitSysClock+0x18>)
 8000642:	2281      	movs	r2, #129	; 0x81
 8000644:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0x00000000;
 8000646:	4b04      	ldr	r3, [pc, #16]	; (8000658 <RCC_voidInitSysClock+0x1c>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
#endif

#else
#error("You chosed Wrong Clock type")
#endif
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	40021004 	.word	0x40021004

0800065c <RCC_voidEnablePeripheralClock>:

//==============================================================================================================

void RCC_voidEnablePeripheralClock( u8 Copy_u8BusId , u8 Copy_u8PeripheralId ){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	460a      	mov	r2, r1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	4613      	mov	r3, r2
 800066a:	71bb      	strb	r3, [r7, #6]



	if (Copy_u8BusId <= 31)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b1f      	cmp	r3, #31
 8000670:	d82a      	bhi.n	80006c8 <RCC_voidEnablePeripheralClock+0x6c>
	{
		switch( Copy_u8BusId ){
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d01c      	beq.n	80006b2 <RCC_voidEnablePeripheralClock+0x56>
 8000678:	2b02      	cmp	r3, #2
 800067a:	dc25      	bgt.n	80006c8 <RCC_voidEnablePeripheralClock+0x6c>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <RCC_voidEnablePeripheralClock+0x2a>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d00b      	beq.n	800069c <RCC_voidEnablePeripheralClock+0x40>
	{
		/* Return Error*/
	}


}
 8000684:	e020      	b.n	80006c8 <RCC_voidEnablePeripheralClock+0x6c>
		case AHB_BUS  : SET_BIT( RCC_AHBENR  , Copy_u8PeripheralId ); break;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <RCC_voidEnablePeripheralClock+0x78>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	2101      	movs	r1, #1
 800068e:	fa01 f202 	lsl.w	r2, r1, r2
 8000692:	4611      	mov	r1, r2
 8000694:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <RCC_voidEnablePeripheralClock+0x78>)
 8000696:	430b      	orrs	r3, r1
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	e015      	b.n	80006c8 <RCC_voidEnablePeripheralClock+0x6c>
		case APB1_BUS :	SET_BIT( RCC_APB1ENR , Copy_u8PeripheralId ); break;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <RCC_voidEnablePeripheralClock+0x7c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	79ba      	ldrb	r2, [r7, #6]
 80006a2:	2101      	movs	r1, #1
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <RCC_voidEnablePeripheralClock+0x7c>)
 80006ac:	430b      	orrs	r3, r1
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	e00a      	b.n	80006c8 <RCC_voidEnablePeripheralClock+0x6c>
		case APB2_BUS : SET_BIT( RCC_APB2ENR , Copy_u8PeripheralId ); break;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <RCC_voidEnablePeripheralClock+0x80>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	79ba      	ldrb	r2, [r7, #6]
 80006b8:	2101      	movs	r1, #1
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	4611      	mov	r1, r2
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <RCC_voidEnablePeripheralClock+0x80>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	bf00      	nop
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021014 	.word	0x40021014
 80006d8:	4002101c 	.word	0x4002101c
 80006dc:	40021018 	.word	0x40021018

080006e0 <RCC_u32GetSysClkFreq>:
	case APB2_BUS : CLR_BIT( RCC_APB2ENR , Copy_u8PeripheralId ); break;

	}
}
//==============================================================================================================
u32  RCC_u32GetSysClkFreq( void ){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
u32 j=0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: not applicable
	switch((RCC_CFGR>>2)&0b11){
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <RCC_u32GetSysClkFreq+0x60>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	089b      	lsrs	r3, r3, #2
 80006f0:	f003 0303 	and.w	r3, r3, #3
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d00e      	beq.n	8000716 <RCC_u32GetSysClkFreq+0x36>
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d81a      	bhi.n	8000732 <RCC_u32GetSysClkFreq+0x52>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <RCC_u32GetSysClkFreq+0x26>
 8000700:	2b01      	cmp	r3, #1
 8000702:	d004      	beq.n	800070e <RCC_u32GetSysClkFreq+0x2e>
 8000704:	e015      	b.n	8000732 <RCC_u32GetSysClkFreq+0x52>
	case 0:
		return j=8000000;break;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <RCC_u32GetSysClkFreq+0x64>)
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	e012      	b.n	8000734 <RCC_u32GetSysClkFreq+0x54>
	case 1:return j=16000000;break;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <RCC_u32GetSysClkFreq+0x68>)
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	e00e      	b.n	8000734 <RCC_u32GetSysClkFreq+0x54>
	case 2:
		return  j=(4000000*Pll_MUL[(RCC_CFGR>>18)&0b1111]);
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <RCC_u32GetSysClkFreq+0x60>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	0c9b      	lsrs	r3, r3, #18
 800071c:	f003 030f 	and.w	r3, r3, #15
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <RCC_u32GetSysClkFreq+0x6c>)
 8000722:	5cd3      	ldrb	r3, [r2, r3]
 8000724:	461a      	mov	r2, r3
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <RCC_u32GetSysClkFreq+0x70>)
 8000728:	fb02 f303 	mul.w	r3, r2, r3
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	e000      	b.n	8000734 <RCC_u32GetSysClkFreq+0x54>
		break;
	}
	return j;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40021004 	.word	0x40021004
 8000744:	007a1200 	.word	0x007a1200
 8000748:	00f42400 	.word	0x00f42400
 800074c:	08000e34 	.word	0x08000e34
 8000750:	003d0900 	.word	0x003d0900

08000754 <RCC_u32GetHClkFreq>:
//==============================================================================================================
u32  RCC_u32GetHClkFreq( void ){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	//	Bits 7:4 HPRE: AHB prescaler
	return (RCC_u32GetSysClkFreq()>>AHB_Prescaler[(RCC_CFGR>>4)&0b1111]);
 8000758:	f7ff ffc2 	bl	80006e0 <RCC_u32GetSysClkFreq>
 800075c:	4602      	mov	r2, r0
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <RCC_u32GetHClkFreq+0x20>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	091b      	lsrs	r3, r3, #4
 8000764:	f003 030f 	and.w	r3, r3, #15
 8000768:	4903      	ldr	r1, [pc, #12]	; (8000778 <RCC_u32GetHClkFreq+0x24>)
 800076a:	5ccb      	ldrb	r3, [r1, r3]
 800076c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000770:	4618      	mov	r0, r3
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021004 	.word	0x40021004
 8000778:	08000e24 	.word	0x08000e24

0800077c <RCC_u32GetPClk1Freq>:
//==============================================================================================================
u32  RCC_u32GetPClk1Freq( void ){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	//RCC_u8GetHClkFreq -> AHB clock
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (RCC_u32GetHClkFreq()>>APB1or2_Prescaler[(RCC_CFGR>>8)&0b111]);//shift right mean divide
 8000780:	f7ff ffe8 	bl	8000754 <RCC_u32GetHClkFreq>
 8000784:	4602      	mov	r2, r0
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <RCC_u32GetPClk1Freq+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	f003 0307 	and.w	r3, r3, #7
 8000790:	4903      	ldr	r1, [pc, #12]	; (80007a0 <RCC_u32GetPClk1Freq+0x24>)
 8000792:	5ccb      	ldrb	r3, [r1, r3]
 8000794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000798:	4618      	mov	r0, r3
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021004 	.word	0x40021004
 80007a0:	08000e1c 	.word	0x08000e1c

080007a4 <MCAL_SPI_Init>:
 * @param[in]           -SPIx : where x is 1,2,depend on device.........
 * @param[in]           - SPIConfig: all SPI configuration in SPI_config
 * @retval              -NONE
 * note                 -support SPI full DUPLEX master/slave only & NSS HW and SW
 */
void MCAL_SPI_Init(SPI_TypeDef* SPIx,SPI_config* SPIX_config ){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	//Safety for Register
	u16 tempreg_cr1=0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	81fb      	strh	r3, [r7, #14]
	u16 tempreg_cr2=0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	81bb      	strh	r3, [r7, #12]
	if (SPIx==SPI1){
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a3e      	ldr	r2, [pc, #248]	; (80008b4 <MCAL_SPI_Init+0x110>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d107      	bne.n	80007ce <MCAL_SPI_Init+0x2a>
		GL_SPI_Config[SPI1_index]=SPIX_config;
 80007be:	4a3e      	ldr	r2, [pc, #248]	; (80008b8 <MCAL_SPI_Init+0x114>)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	6013      	str	r3, [r2, #0]
		RCC_voidEnablePeripheralClock(APB2_BUS, SPI1_RCC);
 80007c4:	210c      	movs	r1, #12
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff ff48 	bl	800065c <RCC_voidEnablePeripheralClock>
 80007cc:	e00a      	b.n	80007e4 <MCAL_SPI_Init+0x40>
	}
	else if(SPIx==SPI2){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a3a      	ldr	r2, [pc, #232]	; (80008bc <MCAL_SPI_Init+0x118>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <MCAL_SPI_Init+0x40>
		GL_SPI_Config[SPI2_index]=SPIX_config;
 80007d6:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <MCAL_SPI_Init+0x114>)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	6053      	str	r3, [r2, #4]
		RCC_voidEnablePeripheralClock(APB1_BUS, SPI2_RCC);
 80007dc:	210e      	movs	r1, #14
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff3c 	bl	800065c <RCC_voidEnablePeripheralClock>

	}

	//select SPI mode if(master or slave )
	tempreg_cr1|=SPIX_config->Device_Mode;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	881a      	ldrh	r2, [r3, #0]
 80007e8:	89fb      	ldrh	r3, [r7, #14]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	81fb      	strh	r3, [r7, #14]
	//SPI communication_Mode (full DUPLEX or receiver or ..........)
	tempreg_cr1|=SPIX_config->Communicatio_Mode;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	885a      	ldrh	r2, [r3, #2]
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	81fb      	strh	r3, [r7, #14]
	//select frame format if(MSB or LSB )
	tempreg_cr1|=SPIX_config->Frame_Format;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	889a      	ldrh	r2, [r3, #4]
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	4313      	orrs	r3, r2
 8000800:	81fb      	strh	r3, [r7, #14]
	//select SPI Data size if(8 or 16 Bits )
	tempreg_cr1|=SPIX_config->Data_Size;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	88da      	ldrh	r2, [r3, #6]
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4313      	orrs	r3, r2
 800080a:	81fb      	strh	r3, [r7, #14]
	//select SPI clock polarity(0,1 )
	tempreg_cr1|=SPIX_config->Clock_Polarity;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	891a      	ldrh	r2, [r3, #8]
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	4313      	orrs	r3, r2
 8000814:	81fb      	strh	r3, [r7, #14]
	//select SPI clock phase(1,0)
	tempreg_cr1|=SPIX_config->Clock_Phase;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	895a      	ldrh	r2, [r3, #10]
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	4313      	orrs	r3, r2
 800081e:	81fb      	strh	r3, [r7, #14]
	/**************************** NSS  ************************************/
	if (SPIX_config->NSS==SPI_NSS_Hardware_Master_SS_output_enable){
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	899b      	ldrh	r3, [r3, #12]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d105      	bne.n	8000834 <MCAL_SPI_Init+0x90>
		tempreg_cr2|=SPIX_config->NSS;//cr2
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	899a      	ldrh	r2, [r3, #12]
 800082c:	89bb      	ldrh	r3, [r7, #12]
 800082e:	4313      	orrs	r3, r2
 8000830:	81bb      	strh	r3, [r7, #12]
 8000832:	e00e      	b.n	8000852 <MCAL_SPI_Init+0xae>
	}
	else if(SPIX_config->NSS==SPI_NSS_Hardware_Master_SS_output_disable){
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	899b      	ldrh	r3, [r3, #12]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d105      	bne.n	8000848 <MCAL_SPI_Init+0xa4>
		tempreg_cr2|=SPIX_config->NSS;//cr2
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	899a      	ldrh	r2, [r3, #12]
 8000840:	89bb      	ldrh	r3, [r7, #12]
 8000842:	4313      	orrs	r3, r2
 8000844:	81bb      	strh	r3, [r7, #12]
 8000846:	e004      	b.n	8000852 <MCAL_SPI_Init+0xae>
	}
	else {
		tempreg_cr1|=SPIX_config->NSS;//cr1
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	899a      	ldrh	r2, [r3, #12]
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	4313      	orrs	r3, r2
 8000850:	81fb      	strh	r3, [r7, #14]
	}
	//select SPI baud rate(2,4,8,16,32,64,128,256,512 )
	tempreg_cr1|=SPIX_config->SPI_BaudRatePrescaler;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	89da      	ldrh	r2, [r3, #14]
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	4313      	orrs	r3, r2
 800085a:	81fb      	strh	r3, [r7, #14]

	/******************************** Interrupt ****************************/
	//cr2
	if(SPIX_config->IRQ_Enable!= SPI_IRQ_Enable_None){
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	8a1b      	ldrh	r3, [r3, #16]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d019      	beq.n	8000898 <MCAL_SPI_Init+0xf4>
		tempreg_cr2|=SPIX_config->IRQ_Enable;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	8a1a      	ldrh	r2, [r3, #16]
 8000868:	89bb      	ldrh	r3, [r7, #12]
 800086a:	4313      	orrs	r3, r2
 800086c:	81bb      	strh	r3, [r7, #12]

		if(SPIx==SPI1){
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <MCAL_SPI_Init+0x110>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d106      	bne.n	8000884 <MCAL_SPI_Init+0xe0>
			SPI1_IRQ_Enable;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MCAL_SPI_Init+0x11c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <MCAL_SPI_Init+0x11c>)
 800087c:	f043 0320 	orr.w	r3, r3, #32
 8000880:	6013      	str	r3, [r2, #0]
 8000882:	e009      	b.n	8000898 <MCAL_SPI_Init+0xf4>
		}
		else if(SPIx==SPI2){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <MCAL_SPI_Init+0x118>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d105      	bne.n	8000898 <MCAL_SPI_Init+0xf4>
			SPI2_IRQ_Enable;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MCAL_SPI_Init+0x11c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <MCAL_SPI_Init+0x11c>)
 8000892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000896:	6013      	str	r3, [r2, #0]
		}
	}
	//enable SPI Bit 6 SPE: SPI enable
	tempreg_cr1|=(0X1U<<6);
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089e:	81fb      	strh	r3, [r7, #14]
	SPIx->CR1=tempreg_cr1;
 80008a0:	89fa      	ldrh	r2, [r7, #14]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
	SPIx->CR2=tempreg_cr2;
 80008a6:	89ba      	ldrh	r2, [r7, #12]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40013000 	.word	0x40013000
 80008b8:	20000058 	.word	0x20000058
 80008bc:	40003800 	.word	0x40003800
 80008c0:	e000e104 	.word	0xe000e104

080008c4 <MCAL_SPI_Send_Data>:
 * @param[in]           -SPIx and Buffer and polling option
 * @param[in]           - SPIx
 * @retval              -NONE
 * note                 -none
 */
void MCAL_SPI_Send_Data(SPI_TypeDef* SPIx,u16* ptBuffer ,Polling_spi_mechnism PollingEn){
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	4613      	mov	r3, r2
 80008d0:	71fb      	strb	r3, [r7, #7]

	SPIx->DR=*((u16*)ptBuffer);
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	60da      	str	r2, [r3, #12]
	if(PollingEn==SPI_polling_enable){
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d106      	bne.n	80008f0 <MCAL_SPI_Send_Data+0x2c>
				while(!(SPIx->SR&SPI_SR_TXE));
 80008e2:	bf00      	nop
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <MCAL_SPI_Send_Data+0x20>
			}

}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
	...

080008fc <MCAL_SPI_Set_Pins>:

}


/********************************** SPI_Pins_Init ******************************/
void MCAL_SPI_Set_Pins(SPI_TypeDef* SPIx){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	//you should choice from SPI_congif file which SPI work
if (SPIx==SPI1){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a27      	ldr	r2, [pc, #156]	; (80009a4 <MCAL_SPI_Set_Pins+0xa8>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d146      	bne.n	800099a <MCAL_SPI_Set_Pins+0x9e>
	//PA4:SPI_NSS
	//PA5:SPI_SCK
	//PA6:SPI_MISO
	//PA7:SPI_MOSI
	if(GL_SPI_Config[SPI1_index]->Device_Mode==SPI_Device_Mode_Master){    //master
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <MCAL_SPI_Set_Pins+0xac>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d123      	bne.n	800095e <MCAL_SPI_Set_Pins+0x62>
		//PA4:SPI_NSS
		switch(GL_SPI_Config[SPI1_index]->NSS){
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <MCAL_SPI_Set_Pins+0xac>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	899b      	ldrh	r3, [r3, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <MCAL_SPI_Set_Pins+0x2a>
 8000920:	2b04      	cmp	r3, #4
 8000922:	d006      	beq.n	8000932 <MCAL_SPI_Set_Pins+0x36>
 8000924:	e00b      	b.n	800093e <MCAL_SPI_Set_Pins+0x42>
		case SPI_NSS_Hardware_Master_SS_output_disable:
			MDIO_voidSetPinDirection(DIOA, PIN4, INPUT_FLOATING);                        break;
 8000926:	2204      	movs	r2, #4
 8000928:	2104      	movs	r1, #4
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fc20 	bl	8000170 <MDIO_voidSetPinDirection>
 8000930:	e005      	b.n	800093e <MCAL_SPI_Set_Pins+0x42>
		case SPI_NSS_Hardware_Master_SS_output_enable:
			MDIO_voidSetPinDirection(DIOA, PIN4, OUTPUT_SPEED_10MHZ_AFPP);                        break;
 8000932:	2209      	movs	r2, #9
 8000934:	2104      	movs	r1, #4
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fc1a 	bl	8000170 <MDIO_voidSetPinDirection>
 800093c:	bf00      	nop
		}
		//PA5:SPI_SCK
		MDIO_voidSetPinDirection(DIOA, PIN5, OUTPUT_SPEED_10MHZ_AFPP);
 800093e:	2209      	movs	r2, #9
 8000940:	2105      	movs	r1, #5
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff fc14 	bl	8000170 <MDIO_voidSetPinDirection>
		//PA6:SPI_MISO
		//Full duplex / master Input floating / Input pull-u
		MDIO_voidSetPinDirection(DIOA, PIN6, INPUT_FLOATING);
 8000948:	2204      	movs	r2, #4
 800094a:	2106      	movs	r1, #6
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fc0f 	bl	8000170 <MDIO_voidSetPinDirection>
		//PA7:SPI_MOSI
		//Full duplex / master Alternate function push-pull
		MDIO_voidSetPinDirection(DIOA, PIN7, OUTPUT_SPEED_10MHZ_AFPP);
 8000952:	2209      	movs	r2, #9
 8000954:	2107      	movs	r1, #7
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fc0a 	bl	8000170 <MDIO_voidSetPinDirection>
	//PA12:SPI2_NSS
	//PA13:SPI2_SCK
	//PA14:SPI2_MISO
	//PA15:SPI2_MOSI
	}
}
 800095c:	e01d      	b.n	800099a <MCAL_SPI_Set_Pins+0x9e>
	else if (GL_SPI_Config[SPI1_index]->Device_Mode==SPI_Device_Mode_Slave){    //slave
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MCAL_SPI_Set_Pins+0xac>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d118      	bne.n	800099a <MCAL_SPI_Set_Pins+0x9e>
		if(GL_SPI_Config[SPI1_index]->NSS==SPI_NSS_Hardware_Slave){
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MCAL_SPI_Set_Pins+0xac>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	899b      	ldrh	r3, [r3, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d104      	bne.n	800097c <MCAL_SPI_Set_Pins+0x80>
			MDIO_voidSetPinDirection(DIOA, PIN4, INPUT_FLOATING);
 8000972:	2204      	movs	r2, #4
 8000974:	2104      	movs	r1, #4
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fbfa 	bl	8000170 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(DIOA, PIN5, INPUT_FLOATING);
 800097c:	2204      	movs	r2, #4
 800097e:	2105      	movs	r1, #5
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fbf5 	bl	8000170 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(DIOA, PIN6, OUTPUT_SPEED_10MHZ_AFPP);
 8000986:	2209      	movs	r2, #9
 8000988:	2106      	movs	r1, #6
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fbf0 	bl	8000170 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(DIOA, PIN7, INPUT_FLOATING);
 8000990:	2204      	movs	r2, #4
 8000992:	2107      	movs	r1, #7
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fbeb 	bl	8000170 <MDIO_voidSetPinDirection>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40013000 	.word	0x40013000
 80009a8:	20000058 	.word	0x20000058

080009ac <SPI1_IRQHandler>:
 * =====================================================
 *                IRQ
 * =====================================================
 */

void SPI1_IRQHandler(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	struct 	SPI_IRQ_Src irq_src;
	irq_src.TXE=Get_Bit(SPI1->SR,1);
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <SPI1_IRQHandler+0x54>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	085b      	lsrs	r3, r3, #1
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	793b      	ldrb	r3, [r7, #4]
 80009c0:	f362 0300 	bfi	r3, r2, #0, #1
 80009c4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE=Get_Bit(SPI1->SR,0);
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <SPI1_IRQHandler+0x54>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	793b      	ldrb	r3, [r7, #4]
 80009d2:	f362 0341 	bfi	r3, r2, #1, #1
 80009d6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI=Get_Bit(SPI1->SR,4);
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <SPI1_IRQHandler+0x54>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	793b      	ldrb	r3, [r7, #4]
 80009e6:	f362 0382 	bfi	r3, r2, #2, #1
 80009ea:	713b      	strb	r3, [r7, #4]

	GL_SPI_Config[SPI1_index]->Ptr_IRQ_CallBack(irq_src);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SPI1_IRQHandler+0x58>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	7938      	ldrb	r0, [r7, #4]
 80009f4:	4798      	blx	r3
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40013000 	.word	0x40013000
 8000a04:	20000058 	.word	0x20000058

08000a08 <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	struct 	SPI_IRQ_Src irq_src;
	irq_src.TXE=Get_Bit(SPI2->SR,1);
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <SPI2_IRQHandler+0x54>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	793b      	ldrb	r3, [r7, #4]
 8000a1c:	f362 0300 	bfi	r3, r2, #0, #1
 8000a20:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE=Get_Bit(SPI2->SR,0);
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <SPI2_IRQHandler+0x54>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	793b      	ldrb	r3, [r7, #4]
 8000a2e:	f362 0341 	bfi	r3, r2, #1, #1
 8000a32:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI=Get_Bit(SPI2->SR,4);
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <SPI2_IRQHandler+0x54>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	793b      	ldrb	r3, [r7, #4]
 8000a42:	f362 0382 	bfi	r3, r2, #2, #1
 8000a46:	713b      	strb	r3, [r7, #4]
		GL_SPI_Config[SPI1_index]->Ptr_IRQ_CallBack(irq_src);
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <SPI2_IRQHandler+0x58>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	7938      	ldrb	r0, [r7, #4]
 8000a50:	4798      	blx	r3
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40003800 	.word	0x40003800
 8000a60:	20000058 	.word	0x20000058

08000a64 <MCAL_USART_Init>:
 * @param[in]           -USARTx : where x is 1,2,.........
 * @param[in]           - USARTCongig: all USART configuration
 * @retval              -NONE
 * note                 -support now for ASYNCH
 */
void MCAL_USART_Init(USART_TypeDef* USARTx,USART_Config* USARTConfig,u32 clock ){
 8000a64:	b480      	push	{r7}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	GL_USART_Config=	USARTConfig;//this for backup
 8000a70:	4a38      	ldr	r2, [pc, #224]	; (8000b54 <MCAL_USART_Init+0xf0>)
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	6013      	str	r3, [r2, #0]
	u32 BRR;
	 //Enable USART Module
	//Bit 13 UE: USART enable
	USARTx->CR1|=(1<<13);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	60da      	str	r2, [r3, #12]
	//Enable USART TX and RX according to configuration item
	USARTx->CR1|=USARTConfig->USART_Mode;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	60da      	str	r2, [r3, #12]
	//PayLoad Width
	USARTx->CR1|=USARTConfig->PayLoad_length;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	7a12      	ldrb	r2, [r2, #8]
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	60da      	str	r2, [r3, #12]
	//Parity control bits
	USARTx->CR1|=USARTConfig->USART_parity;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	7a52      	ldrb	r2, [r2, #9]
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	60da      	str	r2, [r3, #12]
	//Stop control Bits
	USARTx->CR1|=USARTConfig->USART_Stop_Bits;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	7a92      	ldrb	r2, [r2, #10]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	60da      	str	r2, [r3, #12]
	//calculate BAUDRATE
	BRR=USART_BRR_Register(USARTConfig->BaudRate,clock);
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	0119      	lsls	r1, r3, #4
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	009a      	lsls	r2, r3, #2
 8000ad2:	441a      	add	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	fb00 f303 	mul.w	r3, r0, r3
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MCAL_USART_Init+0xf4>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	f003 030f 	and.w	r3, r3, #15
 8000b00:	430b      	orrs	r3, r1
 8000b02:	617b      	str	r3, [r7, #20]
	USARTx->BRR=BRR;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	609a      	str	r2, [r3, #8]
	//IRQ Enable/Disable
	if(USARTConfig->IRQ_Enable!=USART_IRQ_Enable_NONE){
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	7adb      	ldrb	r3, [r3, #11]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d01b      	beq.n	8000b4a <MCAL_USART_Init+0xe6>
		USARTx->CR1|=USARTConfig->IRQ_Enable;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	7ad2      	ldrb	r2, [r2, #11]
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	60da      	str	r2, [r3, #12]
		//Enable NVIC
				if(USARTx==USART1){
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <MCAL_USART_Init+0xf8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d106      	bne.n	8000b36 <MCAL_USART_Init+0xd2>
					USART1_IRQ_Enable;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <MCAL_USART_Init+0xfc>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <MCAL_USART_Init+0xfc>)
 8000b2e:	f043 0320 	orr.w	r3, r3, #32
 8000b32:	6013      	str	r3, [r2, #0]


	}


}
 8000b34:	e009      	b.n	8000b4a <MCAL_USART_Init+0xe6>
				else if(USARTx==USART2){
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <MCAL_USART_Init+0x100>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d105      	bne.n	8000b4a <MCAL_USART_Init+0xe6>
					USART2_IRQ_Enable;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MCAL_USART_Init+0xfc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <MCAL_USART_Init+0xfc>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	371c      	adds	r7, #28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000060 	.word	0x20000060
 8000b58:	51eb851f 	.word	0x51eb851f
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	e000e104 	.word	0xe000e104
 8000b64:	40004400 	.word	0x40004400

08000b68 <MCAL_USART_SendDate>:
			else if(USARTx==USART2){
				USART2_IRQ_Disable;

			}
}
void MCAL_USART_SendDate(USART_TypeDef* USARTx,u16* TXdata,enum polling_mechnism PollingEn){
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	4613      	mov	r3, r2
 8000b74:	71fb      	strb	r3, [r7, #7]
//wait until TXE_flag is set with 1
	if(PollingEn==enable){
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d106      	bne.n	8000b8a <MCAL_USART_SendDate+0x22>
		while(!(USARTx->SR&1<<7));//Bit 7 TXE: Transmit data register empty
 8000b7c:	bf00      	nop
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f9      	beq.n	8000b7e <MCAL_USART_SendDate+0x16>
	}
	if(GL_USART_Config->PayLoad_length==USART_PayLoad_Length_9bits){
		USARTx->DR=(*TXdata&(u16)0x01FF);
	}
	else if(GL_USART_Config->PayLoad_length==USART_PayLoad_Length_8bits){
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MCAL_USART_SendDate+0x40>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	7a1b      	ldrb	r3, [r3, #8]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d104      	bne.n	8000b9e <MCAL_USART_SendDate+0x36>
			USARTx->DR=(*TXdata&(u8)0xFF);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	605a      	str	r2, [r3, #4]
		}
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000060 	.word	0x20000060

08000bac <MCAL_USART_ReceiveDate>:
void MCAL_USART_ReceiveDate(USART_TypeDef* USARTx,u16* RXdata,enum polling_mechnism PollingEn){
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	71fb      	strb	r3, [r7, #7]
	//wait until RXNE_flag is set with 1
		if(PollingEn==enable){
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d106      	bne.n	8000bce <MCAL_USART_ReceiveDate+0x22>
			while(!(USARTx->SR&1<<5));//Bit 5 RXNE: Read data register not empty
 8000bc0:	bf00      	nop
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0320 	and.w	r3, r3, #32
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f9      	beq.n	8000bc2 <MCAL_USART_ReceiveDate+0x16>
			else{
				*((u16*)RXdata)=USARTx->DR & (u8)0xFF;
			}
		}

		else if(GL_USART_Config->PayLoad_length==USART_PayLoad_Length_8bits){
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MCAL_USART_ReceiveDate+0x60>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	7a1b      	ldrb	r3, [r3, #8]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d114      	bne.n	8000c02 <MCAL_USART_ReceiveDate+0x56>
			if(GL_USART_Config->USART_parity==USART_Parity_None){
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MCAL_USART_ReceiveDate+0x60>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	7a5b      	ldrb	r3, [r3, #9]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d107      	bne.n	8000bf2 <MCAL_USART_ReceiveDate+0x46>
							//if no parity all buffer is data
							*((u16*)RXdata)=USARTx->DR & (u8)0xFF;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	801a      	strh	r2, [r3, #0]
						}
		}



}
 8000bf0:	e007      	b.n	8000c02 <MCAL_USART_ReceiveDate+0x56>
							*((u16*)RXdata)=(USARTx->DR & (u8)0x7f);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	801a      	strh	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000060 	.word	0x20000060

08000c10 <USART1_IRQHandler>:


//call back function
//ISR
void USART1_IRQHandler(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	GL_USART_Config->P_IRQ_CallBack();
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <USART1_IRQHandler+0x10>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	4798      	blx	r3
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000060 	.word	0x20000060

08000c24 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <clock_init>:
#include "Stm32f103c6_Drivers/LIP/Wait_ms.h"
#include "Stm32f103c6_Drivers/HAL/LCD/LCD_interface.h"
#include "Stm32f103c6_Drivers/MCAL/USART/USART_interface.h"
#include "Stm32f103c6_Drivers/MCAL/SPI/SPI_config.h"
#include "Stm32f103c6_Drivers/MCAL/SPI/SPI_interface.h"
u32 clock_init(void){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8000c36:	f7ff fd01 	bl	800063c <RCC_voidInitSysClock>
	//enable RCC for USART1
	RCC_voidEnablePeripheralClock(APB2_BUS, USART1_RCC);
 8000c3a:	210e      	movs	r1, #14
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f7ff fd0d 	bl	800065c <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(APB2_BUS, DIOA_RCC);
 8000c42:	2102      	movs	r1, #2
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fd09 	bl	800065c <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(APB2_BUS, AFIO_RCC);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff fd05 	bl	800065c <RCC_voidEnablePeripheralClock>
//	RCC_voidEnablePeripheralClock(APB2_BUS, SPI1_RCC);
	u32 clock =RCC_u32GetPClk1Freq();//this clock used to calculate baudrate of USART1
 8000c52:	f7ff fd93 	bl	800077c <RCC_u32GetPClk1Freq>
 8000c56:	6078      	str	r0, [r7, #4]
	//u32 clock =RCC_u32GetPClk2Freq();//this clock used to calculate baudrate of USART2

	return clock;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <Ibrahim_Interrup>:

u16 ch;



void Ibrahim_Interrup(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

	MCAL_USART_ReceiveDate(USART1, &ch, disable);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4910      	ldr	r1, [pc, #64]	; (8000cb0 <Ibrahim_Interrup+0x4c>)
 8000c6e:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <Ibrahim_Interrup+0x50>)
 8000c70:	f7ff ff9c 	bl	8000bac <MCAL_USART_ReceiveDate>
	MCAL_USART_SendDate(USART1, &ch, enable);
 8000c74:	2200      	movs	r2, #0
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <Ibrahim_Interrup+0x4c>)
 8000c78:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <Ibrahim_Interrup+0x50>)
 8000c7a:	f7ff ff75 	bl	8000b68 <MCAL_USART_SendDate>
	//send to SPI
	u16 ch2=(u8)ch;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <Ibrahim_Interrup+0x4c>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	80fb      	strh	r3, [r7, #6]

	MDIO_voidSetPinValue(DIOA, PIN4, DIO_LOW);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff fb4b 	bl	8000328 <MDIO_voidSetPinValue>
	MCAL_SPI_Send_Data(SPI1, (u16*)&ch2, SPI_polling_enable);
 8000c92:	1dbb      	adds	r3, r7, #6
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <Ibrahim_Interrup+0x54>)
 8000c9a:	f7ff fe13 	bl	80008c4 <MCAL_SPI_Send_Data>
	MDIO_voidSetPinValue(DIOA, PIN4, DIO_HIGH);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fb40 	bl	8000328 <MDIO_voidSetPinValue>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000064 	.word	0x20000064
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	40013000 	.word	0x40013000

08000cbc <main>:
int main(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0

}
	 */

	//with interrupt
	u32 clock_of_usart=clock_init();
 8000cc2:	f7ff ffb5 	bl	8000c30 <clock_init>
 8000cc6:	62f8      	str	r0, [r7, #44]	; 0x2c

	//USART1_IRQ_Enable;
	USART_Config USART_TEST;
	USART_TEST.BaudRate=USART_BaudRate_9600;
 8000cc8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000ccc:	623b      	str	r3, [r7, #32]
	USART_TEST.IRQ_Enable=USART_IRQ_Enable_RXNEIE;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	USART_TEST.P_IRQ_CallBack=Ibrahim_Interrup;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <main+0xa0>)
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_TEST.USART_parity=USART_Parity_None;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	USART_TEST.PayLoad_length=USART_PayLoad_Length_8bits;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	USART_TEST.USART_Stop_Bits=USART_Stop_BITS_one_bit;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	USART_TEST.USART_Mode=USART_Mode_RX_and_TX;
 8000cea:	230c      	movs	r3, #12
 8000cec:	773b      	strb	r3, [r7, #28]
	MDIO_voidSetPinDirection(DIOA, PIN9, OUTPUT_SPEED_10MHZ_AFPP);//Transmitter
 8000cee:	2209      	movs	r2, #9
 8000cf0:	2109      	movs	r1, #9
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff fa3c 	bl	8000170 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(DIOA, PIN10, INPUT_FLOATING);//Receiver
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	210a      	movs	r1, #10
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fa37 	bl	8000170 <MDIO_voidSetPinDirection>
	MCAL_USART_Init(USART1, &USART_TEST, clock_of_usart);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4815      	ldr	r0, [pc, #84]	; (8000d60 <main+0xa4>)
 8000d0c:	f7ff feaa 	bl	8000a64 <MCAL_USART_Init>

	SPI_config SPI_CFG;

	SPI_CFG.Clock_Phase=SPI_Clock_Phase_2EDGE_First_Data_Captur_Edge;
 8000d10:	2301      	movs	r3, #1
 8000d12:	81fb      	strh	r3, [r7, #14]
	SPI_CFG.Clock_Polarity=SPI_Clock_Polarity_HIGH_idle;
 8000d14:	2302      	movs	r3, #2
 8000d16:	81bb      	strh	r3, [r7, #12]
	SPI_CFG.Data_Size=SPI_DataSize_8Bit;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	817b      	strh	r3, [r7, #10]
	SPI_CFG.Frame_Format=SPI_Frame_Format_MSB;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	813b      	strh	r3, [r7, #8]
	SPI_CFG.SPI_BaudRatePrescaler=SPI_BaudRatePrescaler_8;
 8000d20:	2310      	movs	r3, #16
 8000d22:	827b      	strh	r3, [r7, #18]
	SPI_CFG.Device_Mode=SPI_Device_Mode_Master;
 8000d24:	2304      	movs	r3, #4
 8000d26:	80bb      	strh	r3, [r7, #4]
	SPI_CFG.IRQ_Enable=SPI_IRQ_Enable_None;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	82bb      	strh	r3, [r7, #20]
	SPI_CFG.NSS=SPI_NSS_SoftWare_Master_or_Slave_Set;
 8000d2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d30:	823b      	strh	r3, [r7, #16]
	SPI_CFG.Ptr_IRQ_CallBack=NULL_POINTER;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]

	MCAL_SPI_Init(SPI1, &SPI_CFG);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480a      	ldr	r0, [pc, #40]	; (8000d64 <main+0xa8>)
 8000d3c:	f7ff fd32 	bl	80007a4 <MCAL_SPI_Init>
	MCAL_SPI_Set_Pins(SPI1);/*****************************/
 8000d40:	4808      	ldr	r0, [pc, #32]	; (8000d64 <main+0xa8>)
 8000d42:	f7ff fddb 	bl	80008fc <MCAL_SPI_Set_Pins>

	//set pins as (master or slave)
	//configure SS by software PA4
	MDIO_voidSetPinDirection(DIOA, PIN4, OUTPUT_SPEED_10MHZ_PP);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2104      	movs	r1, #4
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fa10 	bl	8000170 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinValue(DIOA, PIN4, DIO_HIGH);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2104      	movs	r1, #4
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff fae7 	bl	8000328 <MDIO_voidSetPinValue>

	while(1){
 8000d5a:	e7fe      	b.n	8000d5a <main+0x9e>
 8000d5c:	08000c65 	.word	0x08000c65
 8000d60:	40013800 	.word	0x40013800
 8000d64:	40013000 	.word	0x40013000

08000d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	; (8000da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <LoopForever+0xe>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	; (8000db4 <LoopForever+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d96:	f000 f811 	bl	8000dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff ff8f 	bl	8000cbc <main>

08000d9e <LoopForever>:

LoopForever:
  b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   r0, =_estack
 8000da0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000dac:	08000e4c 	.word	0x08000e4c
  ldr r2, =_sbss
 8000db0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000db4:	20000068 	.word	0x20000068

08000db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_2_IRQHandler>
	...

08000dbc <__libc_init_array>:
 8000dbc:	b570      	push	{r4, r5, r6, lr}
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4d0c      	ldr	r5, [pc, #48]	; (8000df4 <__libc_init_array+0x38>)
 8000dc2:	4c0d      	ldr	r4, [pc, #52]	; (8000df8 <__libc_init_array+0x3c>)
 8000dc4:	1b64      	subs	r4, r4, r5
 8000dc6:	10a4      	asrs	r4, r4, #2
 8000dc8:	42a6      	cmp	r6, r4
 8000dca:	d109      	bne.n	8000de0 <__libc_init_array+0x24>
 8000dcc:	f000 f81a 	bl	8000e04 <_init>
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	4d0a      	ldr	r5, [pc, #40]	; (8000dfc <__libc_init_array+0x40>)
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <__libc_init_array+0x44>)
 8000dd6:	1b64      	subs	r4, r4, r5
 8000dd8:	10a4      	asrs	r4, r4, #2
 8000dda:	42a6      	cmp	r6, r4
 8000ddc:	d105      	bne.n	8000dea <__libc_init_array+0x2e>
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
 8000de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de4:	4798      	blx	r3
 8000de6:	3601      	adds	r6, #1
 8000de8:	e7ee      	b.n	8000dc8 <__libc_init_array+0xc>
 8000dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dee:	4798      	blx	r3
 8000df0:	3601      	adds	r6, #1
 8000df2:	e7f2      	b.n	8000dda <__libc_init_array+0x1e>
 8000df4:	08000e44 	.word	0x08000e44
 8000df8:	08000e44 	.word	0x08000e44
 8000dfc:	08000e44 	.word	0x08000e44
 8000e00:	08000e48 	.word	0x08000e48

08000e04 <_init>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	bf00      	nop
 8000e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0a:	bc08      	pop	{r3}
 8000e0c:	469e      	mov	lr, r3
 8000e0e:	4770      	bx	lr

08000e10 <_fini>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	bf00      	nop
 8000e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e16:	bc08      	pop	{r3}
 8000e18:	469e      	mov	lr, r3
 8000e1a:	4770      	bx	lr
