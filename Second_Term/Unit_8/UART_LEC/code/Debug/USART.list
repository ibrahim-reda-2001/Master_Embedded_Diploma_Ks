
USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008bc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080009ec  080009ec  000109ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a14  08000a14  00010a1c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a14  08000a14  00010a1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a14  08000a1c  00010a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a14  08000a14  00010a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a18  08000a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000a1c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000a1c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d26  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000640  00000000  00000000  0001176b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00011db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00011f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000097b  00000000  00000000  00012098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000012ba  00000000  00000000  00012a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005f04  00000000  00000000  00013ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00019bd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c4  00000000  00000000  00019c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009d4 	.word	0x080009d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009d4 	.word	0x080009d4

08000170 <MDIO_voidSetPinDirection>:
#include "../../LIP/BIT_MATH.h"
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DIO_private.h"
void MDIO_voidSetPinDirection  ( u8 Copy_u8Port , u8 Copy_u8Pin, u8 u8Copy_u8Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
switch(Copy_u8Port)	{
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b03      	cmp	r3, #3
 8000186:	f000 8082 	beq.w	800028e <MDIO_voidSetPinDirection+0x11e>
 800018a:	2b03      	cmp	r3, #3
 800018c:	f300 80c0 	bgt.w	8000310 <MDIO_voidSetPinDirection+0x1a0>
 8000190:	2b01      	cmp	r3, #1
 8000192:	d002      	beq.n	800019a <MDIO_voidSetPinDirection+0x2a>
 8000194:	2b02      	cmp	r3, #2
 8000196:	d03e      	beq.n	8000216 <MDIO_voidSetPinDirection+0xa6>
			GPIOC->CRH&=~(0b1111<<4*Copy_u8Pin)	;
			GPIOC->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
		}
	break;
}
}
 8000198:	e0ba      	b.n	8000310 <MDIO_voidSetPinDirection+0x1a0>
	if(Copy_u8Pin<=7){
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b07      	cmp	r3, #7
 800019e:	d817      	bhi.n	80001d0 <MDIO_voidSetPinDirection+0x60>
	GPIOA->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 80001a0:	4b5e      	ldr	r3, [pc, #376]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	79ba      	ldrb	r2, [r7, #6]
 80001a6:	0092      	lsls	r2, r2, #2
 80001a8:	210f      	movs	r1, #15
 80001aa:	fa01 f202 	lsl.w	r2, r1, r2
 80001ae:	43d2      	mvns	r2, r2
 80001b0:	4611      	mov	r1, r2
 80001b2:	4a5a      	ldr	r2, [pc, #360]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001b4:	400b      	ands	r3, r1
 80001b6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80001b8:	4b58      	ldr	r3, [pc, #352]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	7979      	ldrb	r1, [r7, #5]
 80001be:	79ba      	ldrb	r2, [r7, #6]
 80001c0:	0092      	lsls	r2, r2, #2
 80001c2:	fa01 f202 	lsl.w	r2, r1, r2
 80001c6:	4611      	mov	r1, r2
 80001c8:	4a54      	ldr	r2, [pc, #336]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001ca:	430b      	orrs	r3, r1
 80001cc:	6013      	str	r3, [r2, #0]
	break;
 80001ce:	e09a      	b.n	8000306 <MDIO_voidSetPinDirection+0x196>
	else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 80001d0:	79bb      	ldrb	r3, [r7, #6]
 80001d2:	2b07      	cmp	r3, #7
 80001d4:	f240 8097 	bls.w	8000306 <MDIO_voidSetPinDirection+0x196>
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	2b0f      	cmp	r3, #15
 80001dc:	f200 8093 	bhi.w	8000306 <MDIO_voidSetPinDirection+0x196>
		Copy_u8Pin-=8;
 80001e0:	79bb      	ldrb	r3, [r7, #6]
 80001e2:	3b08      	subs	r3, #8
 80001e4:	71bb      	strb	r3, [r7, #6]
		GPIOA->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 80001e6:	4b4d      	ldr	r3, [pc, #308]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	210f      	movs	r1, #15
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a48      	ldr	r2, [pc, #288]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 80001fa:	400b      	ands	r3, r1
 80001fc:	6053      	str	r3, [r2, #4]
		GPIOA->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80001fe:	4b47      	ldr	r3, [pc, #284]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	7979      	ldrb	r1, [r7, #5]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	4611      	mov	r1, r2
 800020e:	4a43      	ldr	r2, [pc, #268]	; (800031c <MDIO_voidSetPinDirection+0x1ac>)
 8000210:	430b      	orrs	r3, r1
 8000212:	6053      	str	r3, [r2, #4]
	break;
 8000214:	e077      	b.n	8000306 <MDIO_voidSetPinDirection+0x196>
	if(Copy_u8Pin<=7){
 8000216:	79bb      	ldrb	r3, [r7, #6]
 8000218:	2b07      	cmp	r3, #7
 800021a:	d817      	bhi.n	800024c <MDIO_voidSetPinDirection+0xdc>
		GPIOB->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 800021c:	4b40      	ldr	r3, [pc, #256]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	79ba      	ldrb	r2, [r7, #6]
 8000222:	0092      	lsls	r2, r2, #2
 8000224:	210f      	movs	r1, #15
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	43d2      	mvns	r2, r2
 800022c:	4611      	mov	r1, r2
 800022e:	4a3c      	ldr	r2, [pc, #240]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000230:	400b      	ands	r3, r1
 8000232:	6013      	str	r3, [r2, #0]
		GPIOB->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 8000234:	4b3a      	ldr	r3, [pc, #232]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	7979      	ldrb	r1, [r7, #5]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0092      	lsls	r2, r2, #2
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	4611      	mov	r1, r2
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000246:	430b      	orrs	r3, r1
 8000248:	6013      	str	r3, [r2, #0]
	break;
 800024a:	e05e      	b.n	800030a <MDIO_voidSetPinDirection+0x19a>
		else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	2b07      	cmp	r3, #7
 8000250:	d95b      	bls.n	800030a <MDIO_voidSetPinDirection+0x19a>
 8000252:	79bb      	ldrb	r3, [r7, #6]
 8000254:	2b0f      	cmp	r3, #15
 8000256:	d858      	bhi.n	800030a <MDIO_voidSetPinDirection+0x19a>
			Copy_u8Pin-=8;
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	3b08      	subs	r3, #8
 800025c:	71bb      	strb	r3, [r7, #6]
			GPIOB->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 800025e:	4b30      	ldr	r3, [pc, #192]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	79ba      	ldrb	r2, [r7, #6]
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	210f      	movs	r1, #15
 8000268:	fa01 f202 	lsl.w	r2, r1, r2
 800026c:	43d2      	mvns	r2, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a2b      	ldr	r2, [pc, #172]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000272:	400b      	ands	r3, r1
 8000274:	6053      	str	r3, [r2, #4]
			GPIOB->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	7979      	ldrb	r1, [r7, #5]
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	0092      	lsls	r2, r2, #2
 8000280:	fa01 f202 	lsl.w	r2, r1, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4a26      	ldr	r2, [pc, #152]	; (8000320 <MDIO_voidSetPinDirection+0x1b0>)
 8000288:	430b      	orrs	r3, r1
 800028a:	6053      	str	r3, [r2, #4]
	break;
 800028c:	e03d      	b.n	800030a <MDIO_voidSetPinDirection+0x19a>
	if(Copy_u8Pin<=7){
 800028e:	79bb      	ldrb	r3, [r7, #6]
 8000290:	2b07      	cmp	r3, #7
 8000292:	d817      	bhi.n	80002c4 <MDIO_voidSetPinDirection+0x154>
		GPIOC->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 8000294:	4b23      	ldr	r3, [pc, #140]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	79ba      	ldrb	r2, [r7, #6]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	210f      	movs	r1, #15
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	43d2      	mvns	r2, r2
 80002a4:	4611      	mov	r1, r2
 80002a6:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002a8:	400b      	ands	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
		GPIOC->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	7979      	ldrb	r1, [r7, #5]
 80002b2:	79ba      	ldrb	r2, [r7, #6]
 80002b4:	0092      	lsls	r2, r2, #2
 80002b6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ba:	4611      	mov	r1, r2
 80002bc:	4a19      	ldr	r2, [pc, #100]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002be:	430b      	orrs	r3, r1
 80002c0:	6013      	str	r3, [r2, #0]
	break;
 80002c2:	e024      	b.n	800030e <MDIO_voidSetPinDirection+0x19e>
		else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	2b07      	cmp	r3, #7
 80002c8:	d921      	bls.n	800030e <MDIO_voidSetPinDirection+0x19e>
 80002ca:	79bb      	ldrb	r3, [r7, #6]
 80002cc:	2b0f      	cmp	r3, #15
 80002ce:	d81e      	bhi.n	800030e <MDIO_voidSetPinDirection+0x19e>
			Copy_u8Pin-=8;
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	3b08      	subs	r3, #8
 80002d4:	71bb      	strb	r3, [r7, #6]
			GPIOC->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	210f      	movs	r1, #15
 80002e0:	fa01 f202 	lsl.w	r2, r1, r2
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	4611      	mov	r1, r2
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002ea:	400b      	ands	r3, r1
 80002ec:	6053      	str	r3, [r2, #4]
			GPIOC->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	7979      	ldrb	r1, [r7, #5]
 80002f4:	79ba      	ldrb	r2, [r7, #6]
 80002f6:	0092      	lsls	r2, r2, #2
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <MDIO_voidSetPinDirection+0x1b4>)
 8000300:	430b      	orrs	r3, r1
 8000302:	6053      	str	r3, [r2, #4]
	break;
 8000304:	e003      	b.n	800030e <MDIO_voidSetPinDirection+0x19e>
	break;
 8000306:	bf00      	nop
 8000308:	e002      	b.n	8000310 <MDIO_voidSetPinDirection+0x1a0>
	break;
 800030a:	bf00      	nop
 800030c:	e000      	b.n	8000310 <MDIO_voidSetPinDirection+0x1a0>
	break;
 800030e:	bf00      	nop
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40010800 	.word	0x40010800
 8000320:	40010c00 	.word	0x40010c00
 8000324:	40011000 	.word	0x40011000

08000328 <EXTI0_IRQHandler>:
}



/****************************************** IRQ ************************************************************/
void EXTI0_IRQHandler(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
//pending request clear by write 1
	EXTI->EXTI_PR|=1<<0;
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <EXTI0_IRQHandler+0x1c>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a04      	ldr	r2, [pc, #16]	; (8000344 <EXTI0_IRQHandler+0x1c>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <EXTI0_IRQHandler+0x20>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4798      	blx	r3
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010400 	.word	0x40010400
 8000348:	2000001c 	.word	0x2000001c

0800034c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<1;
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <EXTI1_IRQHandler+0x1c>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4a04      	ldr	r2, [pc, #16]	; (8000368 <EXTI1_IRQHandler+0x1c>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[1]();
 800035c:	4b03      	ldr	r3, [pc, #12]	; (800036c <EXTI1_IRQHandler+0x20>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4798      	blx	r3
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40010400 	.word	0x40010400
 800036c:	2000001c 	.word	0x2000001c

08000370 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<2;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <EXTI2_IRQHandler+0x1c>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <EXTI2_IRQHandler+0x1c>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[2]();
 8000380:	4b03      	ldr	r3, [pc, #12]	; (8000390 <EXTI2_IRQHandler+0x20>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4798      	blx	r3
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40010400 	.word	0x40010400
 8000390:	2000001c 	.word	0x2000001c

08000394 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<3;
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <EXTI3_IRQHandler+0x1c>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <EXTI3_IRQHandler+0x1c>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[3]();
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <EXTI3_IRQHandler+0x20>)
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	4798      	blx	r3
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40010400 	.word	0x40010400
 80003b4:	2000001c 	.word	0x2000001c

080003b8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<4;
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <EXTI4_IRQHandler+0x1c>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <EXTI4_IRQHandler+0x1c>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[4]();
 80003c8:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <EXTI4_IRQHandler+0x20>)
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	4798      	blx	r3
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40010400 	.word	0x40010400
 80003d8:	2000001c 	.word	0x2000001c

080003dc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
if(EXTI->EXTI_PR&1<<5){EXTI->EXTI_PR|=1<<5;GP_IRQ_CallBack[5]();}
 80003e0:	4b26      	ldr	r3, [pc, #152]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d008      	beq.n	80003fe <EXTI9_5_IRQHandler+0x22>
 80003ec:	4b23      	ldr	r3, [pc, #140]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a22      	ldr	r2, [pc, #136]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6153      	str	r3, [r2, #20]
 80003f8:	4b21      	ldr	r3, [pc, #132]	; (8000480 <EXTI9_5_IRQHandler+0xa4>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<6){EXTI->EXTI_PR|=1<<6;GP_IRQ_CallBack[6]();}
 80003fe:	4b1f      	ldr	r3, [pc, #124]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000406:	2b00      	cmp	r3, #0
 8000408:	d008      	beq.n	800041c <EXTI9_5_IRQHandler+0x40>
 800040a:	4b1c      	ldr	r3, [pc, #112]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a1b      	ldr	r2, [pc, #108]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 8000410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <EXTI9_5_IRQHandler+0xa4>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<7){EXTI->EXTI_PR|=1<<7;GP_IRQ_CallBack[7]();}
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000424:	2b00      	cmp	r3, #0
 8000426:	d008      	beq.n	800043a <EXTI9_5_IRQHandler+0x5e>
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a13      	ldr	r2, [pc, #76]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6153      	str	r3, [r2, #20]
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <EXTI9_5_IRQHandler+0xa4>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<8){EXTI->EXTI_PR|=1<<8;GP_IRQ_CallBack[8]();}
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000442:	2b00      	cmp	r3, #0
 8000444:	d008      	beq.n	8000458 <EXTI9_5_IRQHandler+0x7c>
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a0c      	ldr	r2, [pc, #48]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 800044c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <EXTI9_5_IRQHandler+0xa4>)
 8000454:	6a1b      	ldr	r3, [r3, #32]
 8000456:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<9){EXTI->EXTI_PR|=1<<9;GP_IRQ_CallBack[9]();}
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000460:	2b00      	cmp	r3, #0
 8000462:	d008      	beq.n	8000476 <EXTI9_5_IRQHandler+0x9a>
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <EXTI9_5_IRQHandler+0xa0>)
 800046a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800046e:	6153      	str	r3, [r2, #20]
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <EXTI9_5_IRQHandler+0xa4>)
 8000472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000474:	4798      	blx	r3

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40010400 	.word	0x40010400
 8000480:	2000001c 	.word	0x2000001c

08000484 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR&1<<10){EXTI->EXTI_PR|=1<<10;GP_IRQ_CallBack[10]();}
 8000488:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000490:	2b00      	cmp	r3, #0
 8000492:	d008      	beq.n	80004a6 <EXTI15_10_IRQHandler+0x22>
 8000494:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	4a29      	ldr	r2, [pc, #164]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 800049a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800049e:	6153      	str	r3, [r2, #20]
 80004a0:	4b28      	ldr	r3, [pc, #160]	; (8000544 <EXTI15_10_IRQHandler+0xc0>)
 80004a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a4:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<11){EXTI->EXTI_PR|=1<<11;GP_IRQ_CallBack[11]();}
 80004a6:	4b26      	ldr	r3, [pc, #152]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d008      	beq.n	80004c4 <EXTI15_10_IRQHandler+0x40>
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a22      	ldr	r2, [pc, #136]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <EXTI15_10_IRQHandler+0xc0>)
 80004c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c2:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<12){EXTI->EXTI_PR|=1<<12;GP_IRQ_CallBack[12]();}
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d008      	beq.n	80004e2 <EXTI15_10_IRQHandler+0x5e>
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004da:	6153      	str	r3, [r2, #20]
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <EXTI15_10_IRQHandler+0xc0>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<13){EXTI->EXTI_PR|=1<<13;GP_IRQ_CallBack[13]();}
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d008      	beq.n	8000500 <EXTI15_10_IRQHandler+0x7c>
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a13      	ldr	r2, [pc, #76]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 80004f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <EXTI15_10_IRQHandler+0xc0>)
 80004fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004fe:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<14){EXTI->EXTI_PR|=1<<14;GP_IRQ_CallBack[14]();}
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000508:	2b00      	cmp	r3, #0
 800050a:	d008      	beq.n	800051e <EXTI15_10_IRQHandler+0x9a>
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 8000512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000516:	6153      	str	r3, [r2, #20]
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <EXTI15_10_IRQHandler+0xc0>)
 800051a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800051c:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<15){EXTI->EXTI_PR|=1<<15;GP_IRQ_CallBack[15]();}
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d008      	beq.n	800053c <EXTI15_10_IRQHandler+0xb8>
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a04      	ldr	r2, [pc, #16]	; (8000540 <EXTI15_10_IRQHandler+0xbc>)
 8000530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b03      	ldr	r3, [pc, #12]	; (8000544 <EXTI15_10_IRQHandler+0xc0>)
 8000538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800053a:	4798      	blx	r3

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40010400 	.word	0x40010400
 8000544:	2000001c 	.word	0x2000001c

08000548 <RCC_voidInitSysClock>:
//1110: PLL input clock x 16
//1111: PLL input clock x 16
const u8 Pll_MUL[16]={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16};

void RCC_voidInitSysClock(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	RCC_CR = 0x00000081; /* Enable HSI + Trimming = 0 */
	RCC_CFGR = 0x00000000;

#elif RCC_CLOCK_TYPE == RCC_PLL
#if RCC_PLL_INPUT == RCC_PLL_IN_HSI_DIV_2
	RCC_CFGR |= (0b10 << 0);
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <RCC_voidInitSysClock+0x30>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <RCC_voidInitSysClock+0x30>)
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (0b0111 << 18);
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <RCC_voidInitSysClock+0x30>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <RCC_voidInitSysClock+0x30>)
 800055e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000562:	6013      	str	r3, [r2, #0]
	// RCC_CFGR|=(0b100<<8);
	// RCC_CFGR|=(0b101<<11);
	RCC_CR |= (1 << 24);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <RCC_voidInitSysClock+0x34>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <RCC_voidInitSysClock+0x34>)
 800056a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800056e:	6013      	str	r3, [r2, #0]
#endif

#else
#error("You chosed Wrong Clock type")
#endif
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021004 	.word	0x40021004
 800057c:	40021000 	.word	0x40021000

08000580 <RCC_voidEnablePeripheralClock>:

//==============================================================================================================

void RCC_voidEnablePeripheralClock( u8 Copy_u8BusId , u8 Copy_u8PeripheralId ){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]



	if (Copy_u8BusId <= 31)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b1f      	cmp	r3, #31
 8000594:	d82a      	bhi.n	80005ec <RCC_voidEnablePeripheralClock+0x6c>
	{
		switch( Copy_u8BusId ){
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d01c      	beq.n	80005d6 <RCC_voidEnablePeripheralClock+0x56>
 800059c:	2b02      	cmp	r3, #2
 800059e:	dc25      	bgt.n	80005ec <RCC_voidEnablePeripheralClock+0x6c>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <RCC_voidEnablePeripheralClock+0x2a>
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00b      	beq.n	80005c0 <RCC_voidEnablePeripheralClock+0x40>
	{
		/* Return Error*/
	}


}
 80005a8:	e020      	b.n	80005ec <RCC_voidEnablePeripheralClock+0x6c>
		case AHB_BUS  : SET_BIT( RCC_AHBENR  , Copy_u8PeripheralId ); break;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <RCC_voidEnablePeripheralClock+0x78>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	79ba      	ldrb	r2, [r7, #6]
 80005b0:	2101      	movs	r1, #1
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <RCC_voidEnablePeripheralClock+0x78>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	e015      	b.n	80005ec <RCC_voidEnablePeripheralClock+0x6c>
		case APB1_BUS :	SET_BIT( RCC_APB1ENR , Copy_u8PeripheralId ); break;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <RCC_voidEnablePeripheralClock+0x7c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	79ba      	ldrb	r2, [r7, #6]
 80005c6:	2101      	movs	r1, #1
 80005c8:	fa01 f202 	lsl.w	r2, r1, r2
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <RCC_voidEnablePeripheralClock+0x7c>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	e00a      	b.n	80005ec <RCC_voidEnablePeripheralClock+0x6c>
		case APB2_BUS : SET_BIT( RCC_APB2ENR , Copy_u8PeripheralId ); break;
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <RCC_voidEnablePeripheralClock+0x80>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	79ba      	ldrb	r2, [r7, #6]
 80005dc:	2101      	movs	r1, #1
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <RCC_voidEnablePeripheralClock+0x80>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	bf00      	nop
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021014 	.word	0x40021014
 80005fc:	4002101c 	.word	0x4002101c
 8000600:	40021018 	.word	0x40021018

08000604 <RCC_u32GetSysClkFreq>:
	case APB2_BUS : CLR_BIT( RCC_APB2ENR , Copy_u8PeripheralId ); break;

	}
}
//==============================================================================================================
u32  RCC_u32GetSysClkFreq( void ){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
u32 j=0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: not applicable
	switch((RCC_CFGR>>2)&0b11){
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <RCC_u32GetSysClkFreq+0x60>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	089b      	lsrs	r3, r3, #2
 8000614:	f003 0303 	and.w	r3, r3, #3
 8000618:	2b02      	cmp	r3, #2
 800061a:	d00e      	beq.n	800063a <RCC_u32GetSysClkFreq+0x36>
 800061c:	2b02      	cmp	r3, #2
 800061e:	d81a      	bhi.n	8000656 <RCC_u32GetSysClkFreq+0x52>
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <RCC_u32GetSysClkFreq+0x26>
 8000624:	2b01      	cmp	r3, #1
 8000626:	d004      	beq.n	8000632 <RCC_u32GetSysClkFreq+0x2e>
 8000628:	e015      	b.n	8000656 <RCC_u32GetSysClkFreq+0x52>
	case 0:
		return j=8000000;break;
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <RCC_u32GetSysClkFreq+0x64>)
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	e012      	b.n	8000658 <RCC_u32GetSysClkFreq+0x54>
	case 1:return j=16000000;break;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <RCC_u32GetSysClkFreq+0x68>)
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	e00e      	b.n	8000658 <RCC_u32GetSysClkFreq+0x54>
	case 2:
		return  j=(4000000*Pll_MUL[(RCC_CFGR>>18)&0b1111]);
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <RCC_u32GetSysClkFreq+0x60>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	0c9b      	lsrs	r3, r3, #18
 8000640:	f003 030f 	and.w	r3, r3, #15
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <RCC_u32GetSysClkFreq+0x6c>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	461a      	mov	r2, r3
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <RCC_u32GetSysClkFreq+0x70>)
 800064c:	fb02 f303 	mul.w	r3, r2, r3
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	e000      	b.n	8000658 <RCC_u32GetSysClkFreq+0x54>
		break;
	}
	return j;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021004 	.word	0x40021004
 8000668:	007a1200 	.word	0x007a1200
 800066c:	00f42400 	.word	0x00f42400
 8000670:	08000a04 	.word	0x08000a04
 8000674:	003d0900 	.word	0x003d0900

08000678 <RCC_u32GetHClkFreq>:
//==============================================================================================================
u32  RCC_u32GetHClkFreq( void ){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	//	Bits 7:4 HPRE: AHB prescaler
	return (RCC_u32GetSysClkFreq()>>AHB_Prescaler[(RCC_CFGR>>4)&0b1111]);
 800067c:	f7ff ffc2 	bl	8000604 <RCC_u32GetSysClkFreq>
 8000680:	4602      	mov	r2, r0
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <RCC_u32GetHClkFreq+0x20>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	091b      	lsrs	r3, r3, #4
 8000688:	f003 030f 	and.w	r3, r3, #15
 800068c:	4903      	ldr	r1, [pc, #12]	; (800069c <RCC_u32GetHClkFreq+0x24>)
 800068e:	5ccb      	ldrb	r3, [r1, r3]
 8000690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021004 	.word	0x40021004
 800069c:	080009f4 	.word	0x080009f4

080006a0 <RCC_u32GetPClk1Freq>:
//==============================================================================================================
u32  RCC_u32GetPClk1Freq( void ){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	//RCC_u8GetHClkFreq -> AHB clock
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (RCC_u32GetHClkFreq()>>APB1or2_Prescaler[(RCC_CFGR>>8)&0b111]);//shift right mean divide
 80006a4:	f7ff ffe8 	bl	8000678 <RCC_u32GetHClkFreq>
 80006a8:	4602      	mov	r2, r0
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <RCC_u32GetPClk1Freq+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	4903      	ldr	r1, [pc, #12]	; (80006c4 <RCC_u32GetPClk1Freq+0x24>)
 80006b6:	5ccb      	ldrb	r3, [r1, r3]
 80006b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021004 	.word	0x40021004
 80006c4:	080009ec 	.word	0x080009ec

080006c8 <MCAL_USART_Init>:
 * @param[in]           -USARTx : where x is 1,2,.........
 * @param[in]           - USARTCongig: all USART configuration
 * @retval              -NONE
 * note                 -support now for ASYNCH
 */
void MCAL_USART_Init(USART_TypeDef* USARTx,USART_Config* USARTConfig,u32 clock ){
 80006c8:	b480      	push	{r7}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
	GL_USART_Config=	USARTConfig;//this for backup
 80006d4:	4a38      	ldr	r2, [pc, #224]	; (80007b8 <MCAL_USART_Init+0xf0>)
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	6013      	str	r3, [r2, #0]
	u32 BRR;
	 //Enable USART Module
	//Bit 13 UE: USART enable
	USARTx->CR1|=(1<<13);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	60da      	str	r2, [r3, #12]
	//Enable USART TX and RX according to configuration item
	USARTx->CR1|=USARTConfig->USART_Mode;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	7812      	ldrb	r2, [r2, #0]
 80006ee:	431a      	orrs	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	60da      	str	r2, [r3, #12]
	//PayLoad Width
	USARTx->CR1|=USARTConfig->PayLoad_length;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	7a12      	ldrb	r2, [r2, #8]
 80006fc:	431a      	orrs	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	60da      	str	r2, [r3, #12]
	//Parity control bits
	USARTx->CR1|=USARTConfig->USART_parity;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	7a52      	ldrb	r2, [r2, #9]
 800070a:	431a      	orrs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	60da      	str	r2, [r3, #12]
	//Stop control Bits
	USARTx->CR1|=USARTConfig->USART_Stop_Bits;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	7a92      	ldrb	r2, [r2, #10]
 8000718:	431a      	orrs	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	60da      	str	r2, [r3, #12]
	//calculate BAUDRATE
	BRR=USART_BRR_Register(USARTConfig->BaudRate,clock);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	0119      	lsls	r1, r3, #4
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	009a      	lsls	r2, r3, #2
 8000736:	441a      	add	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	fbb0 f3f3 	udiv	r3, r0, r3
 800074e:	2064      	movs	r0, #100	; 0x64
 8000750:	fb00 f303 	mul.w	r3, r0, r3
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	011b      	lsls	r3, r3, #4
 8000758:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MCAL_USART_Init+0xf4>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	f003 030f 	and.w	r3, r3, #15
 8000764:	430b      	orrs	r3, r1
 8000766:	617b      	str	r3, [r7, #20]
	USARTx->BRR=BRR;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	609a      	str	r2, [r3, #8]
	//IRQ Enable/Disable
	if(USARTConfig->IRQ_Enable!=USART_IRQ_Enable_NONE){
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	7adb      	ldrb	r3, [r3, #11]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d01b      	beq.n	80007ae <MCAL_USART_Init+0xe6>
		USARTx->CR1|=USARTConfig->IRQ_Enable;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	7ad2      	ldrb	r2, [r2, #11]
 800077e:	431a      	orrs	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	60da      	str	r2, [r3, #12]
		//Enable NVIC
				if(USARTx==USART1){
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <MCAL_USART_Init+0xf8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <MCAL_USART_Init+0xd2>
					USART1_IRQ_Enable;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MCAL_USART_Init+0xfc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <MCAL_USART_Init+0xfc>)
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	6013      	str	r3, [r2, #0]


	}


}
 8000798:	e009      	b.n	80007ae <MCAL_USART_Init+0xe6>
				else if(USARTx==USART2){
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <MCAL_USART_Init+0x100>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d105      	bne.n	80007ae <MCAL_USART_Init+0xe6>
					USART2_IRQ_Enable;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MCAL_USART_Init+0xfc>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <MCAL_USART_Init+0xfc>)
 80007a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ac:	6013      	str	r3, [r2, #0]
}
 80007ae:	bf00      	nop
 80007b0:	371c      	adds	r7, #28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000058 	.word	0x20000058
 80007bc:	51eb851f 	.word	0x51eb851f
 80007c0:	40013800 	.word	0x40013800
 80007c4:	e000e104 	.word	0xe000e104
 80007c8:	40004400 	.word	0x40004400

080007cc <MCAL_USART_SendDate>:
			else if(USARTx==USART2){
				USART2_IRQ_Disable;

			}
}
void MCAL_USART_SendDate(USART_TypeDef* USARTx,u16* TXdata,enum polling_mechnism PollingEn){
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	4613      	mov	r3, r2
 80007d8:	71fb      	strb	r3, [r7, #7]
//wait until TXE_flag is set with 1
	if(PollingEn==enable){
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <MCAL_USART_SendDate+0x22>
		while(!(USARTx->SR&1<<7));
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f9      	beq.n	80007e2 <MCAL_USART_SendDate+0x16>
	}
	if(GL_USART_Config->PayLoad_length==USART_PayLoad_Length_9bits){
		USARTx->DR=(*TXdata&(u16)0x01FF);
	}
	else if(GL_USART_Config->PayLoad_length==USART_PayLoad_Length_8bits){
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <MCAL_USART_SendDate+0x40>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	7a1b      	ldrb	r3, [r3, #8]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d104      	bne.n	8000802 <MCAL_USART_SendDate+0x36>
			USARTx->DR=(*TXdata&(u8)0xFF);
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	605a      	str	r2, [r3, #4]
		}
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000058 	.word	0x20000058

08000810 <MCAL_USART_ReceiveDate>:
void MCAL_USART_ReceiveDate(USART_TypeDef* USARTx,u16* RXdata,enum polling_mechnism PollingEn){
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	4613      	mov	r3, r2
 800081c:	71fb      	strb	r3, [r7, #7]
	//wait until RXNE_flag is set with 1
		if(PollingEn==enable){
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d106      	bne.n	8000832 <MCAL_USART_ReceiveDate+0x22>
			while(!(USARTx->SR&1<<5));
 8000824:	bf00      	nop
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f003 0320 	and.w	r3, r3, #32
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0f9      	beq.n	8000826 <MCAL_USART_ReceiveDate+0x16>
			else{
				*((u16*)RXdata)=USARTx->DR & (u8)0xFF;
			}
		}

		else if(GL_USART_Config->PayLoad_length==USART_PayLoad_Length_8bits){
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MCAL_USART_ReceiveDate+0x60>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	7a1b      	ldrb	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d114      	bne.n	8000866 <MCAL_USART_ReceiveDate+0x56>
			if(GL_USART_Config->USART_parity==USART_Parity_None){
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MCAL_USART_ReceiveDate+0x60>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	7a5b      	ldrb	r3, [r3, #9]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d107      	bne.n	8000856 <MCAL_USART_ReceiveDate+0x46>
							//if no parity all buffer is data
							*((u16*)RXdata)=USARTx->DR & (u8)0xFF;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	b29b      	uxth	r3, r3
 800084c:	b2db      	uxtb	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	801a      	strh	r2, [r3, #0]
						}
		}



}
 8000854:	e007      	b.n	8000866 <MCAL_USART_ReceiveDate+0x56>
							*((u16*)RXdata)=(USARTx->DR & (u8)0x7f);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	b29b      	uxth	r3, r3
 800085c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000860:	b29a      	uxth	r2, r3
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	801a      	strh	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000058 	.word	0x20000058

08000874 <USART1_IRQHandler>:


//call back function
//ISR
void USART1_IRQHandler(void){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	GL_USART_Config->P_IRQ_CallBack();
 8000878:	4b02      	ldr	r3, [pc, #8]	; (8000884 <USART1_IRQHandler+0x10>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	4798      	blx	r3
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000058 	.word	0x20000058

08000888 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <clock_init>:
#include "Stm32f103c6_Drivers/MCAL/RCC/RCC_interface.h"
#include "Stm32f103c6_Drivers/MCAL/EXTI_And_AFIO/EXTI&AFIO_interface.h"
#include "Stm32f103c6_Drivers/LIP/Wait_ms.h"
#include "Stm32f103c6_Drivers/HAL/LCD/LCD_interface.h"
#include "Stm32f103c6_Drivers/MCAL/USART/USART_interface.h"
u32 clock_init(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
RCC_voidInitSysClock();
 800089a:	f7ff fe55 	bl	8000548 <RCC_voidInitSysClock>
	//enable RCC for USART1
	RCC_voidEnablePeripheralClock(APB2_BUS, USART1_RCC);
 800089e:	210e      	movs	r1, #14
 80008a0:	2002      	movs	r0, #2
 80008a2:	f7ff fe6d 	bl	8000580 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(APB2_BUS, DIOA_RCC);
 80008a6:	2102      	movs	r1, #2
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fe69 	bl	8000580 <RCC_voidEnablePeripheralClock>
	MDIO_voidSetPinDirection(DIOA, PIN9, OUTPUT_SPEED_10MHZ_AFPP);//Transmitter
 80008ae:	2209      	movs	r2, #9
 80008b0:	2109      	movs	r1, #9
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fc5c 	bl	8000170 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(APB2_BUS, PIN10, INPUT_FLOATING);//Receiver
 80008b8:	2204      	movs	r2, #4
 80008ba:	210a      	movs	r1, #10
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff fc57 	bl	8000170 <MDIO_voidSetPinDirection>
	u32 clock =RCC_u32GetPClk1Freq();//this clock used to calculate baudrate of USART1
 80008c2:	f7ff feed 	bl	80006a0 <RCC_u32GetPClk1Freq>
 80008c6:	6078      	str	r0, [r7, #4]
	//u32 clock =RCC_u32GetPClk2Freq();//this clock used to calculate baudrate of USART2

	return clock;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <Ibrahim_Interrup>:
u16 ch;
void Ibrahim_Interrup(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	MCAL_USART_ReceiveDate(USART1, &ch, disable);
 80008d8:	2201      	movs	r2, #1
 80008da:	4905      	ldr	r1, [pc, #20]	; (80008f0 <Ibrahim_Interrup+0x1c>)
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <Ibrahim_Interrup+0x20>)
 80008de:	f7ff ff97 	bl	8000810 <MCAL_USART_ReceiveDate>
	MCAL_USART_SendDate(USART1, &ch, enable);
 80008e2:	2200      	movs	r2, #0
 80008e4:	4902      	ldr	r1, [pc, #8]	; (80008f0 <Ibrahim_Interrup+0x1c>)
 80008e6:	4803      	ldr	r0, [pc, #12]	; (80008f4 <Ibrahim_Interrup+0x20>)
 80008e8:	f7ff ff70 	bl	80007cc <MCAL_USART_SendDate>

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000005c 	.word	0x2000005c
 80008f4:	40013800 	.word	0x40013800

080008f8 <main>:
int main(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0

}
*/

	//with interrupt
	u32 clock_of_usart=clock_init();
 80008fe:	f7ff ffc9 	bl	8000894 <clock_init>
 8000902:	6178      	str	r0, [r7, #20]
	//USART1_IRQ_Enable;
		USART_Config USART_TEST;
		USART_TEST.BaudRate=USART_BaudRate_9600;
 8000904:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000908:	60bb      	str	r3, [r7, #8]
		USART_TEST.IRQ_Enable=USART_IRQ_Enable_RXNEIE;
 800090a:	2320      	movs	r3, #32
 800090c:	73fb      	strb	r3, [r7, #15]
		USART_TEST.P_IRQ_CallBack=Ibrahim_Interrup;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <main+0x38>)
 8000910:	613b      	str	r3, [r7, #16]
		USART_TEST.USART_parity=USART_Parity_None;
 8000912:	2300      	movs	r3, #0
 8000914:	737b      	strb	r3, [r7, #13]
		USART_TEST.PayLoad_length=USART_PayLoad_Length_8bits;
 8000916:	2300      	movs	r3, #0
 8000918:	733b      	strb	r3, [r7, #12]
		USART_TEST.USART_Stop_Bits=USART_Stop_BITS_one_bit;
 800091a:	2300      	movs	r3, #0
 800091c:	73bb      	strb	r3, [r7, #14]
		USART_TEST.USART_Mode=USART_Mode_RX_and_TX;
 800091e:	230c      	movs	r3, #12
 8000920:	713b      	strb	r3, [r7, #4]
		MCAL_USART_Init(USART1, &USART_TEST, clock_of_usart);
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	4619      	mov	r1, r3
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <main+0x3c>)
 800092a:	f7ff fecd 	bl	80006c8 <MCAL_USART_Init>
	while(1){
 800092e:	e7fe      	b.n	800092e <main+0x36>
 8000930:	080008d5 	.word	0x080008d5
 8000934:	40013800 	.word	0x40013800

08000938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800093c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	; (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <LoopForever+0xe>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	; (8000984 <LoopForever+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000966:	f000 f811 	bl	800098c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff ffc5 	bl	80008f8 <main>

0800096e <LoopForever>:

LoopForever:
  b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   r0, =_estack
 8000970:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800097c:	08000a1c 	.word	0x08000a1c
  ldr r2, =_sbss
 8000980:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000984:	20000060 	.word	0x20000060

08000988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_2_IRQHandler>
	...

0800098c <__libc_init_array>:
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	2600      	movs	r6, #0
 8000990:	4d0c      	ldr	r5, [pc, #48]	; (80009c4 <__libc_init_array+0x38>)
 8000992:	4c0d      	ldr	r4, [pc, #52]	; (80009c8 <__libc_init_array+0x3c>)
 8000994:	1b64      	subs	r4, r4, r5
 8000996:	10a4      	asrs	r4, r4, #2
 8000998:	42a6      	cmp	r6, r4
 800099a:	d109      	bne.n	80009b0 <__libc_init_array+0x24>
 800099c:	f000 f81a 	bl	80009d4 <_init>
 80009a0:	2600      	movs	r6, #0
 80009a2:	4d0a      	ldr	r5, [pc, #40]	; (80009cc <__libc_init_array+0x40>)
 80009a4:	4c0a      	ldr	r4, [pc, #40]	; (80009d0 <__libc_init_array+0x44>)
 80009a6:	1b64      	subs	r4, r4, r5
 80009a8:	10a4      	asrs	r4, r4, #2
 80009aa:	42a6      	cmp	r6, r4
 80009ac:	d105      	bne.n	80009ba <__libc_init_array+0x2e>
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b4:	4798      	blx	r3
 80009b6:	3601      	adds	r6, #1
 80009b8:	e7ee      	b.n	8000998 <__libc_init_array+0xc>
 80009ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80009be:	4798      	blx	r3
 80009c0:	3601      	adds	r6, #1
 80009c2:	e7f2      	b.n	80009aa <__libc_init_array+0x1e>
 80009c4:	08000a14 	.word	0x08000a14
 80009c8:	08000a14 	.word	0x08000a14
 80009cc:	08000a14 	.word	0x08000a14
 80009d0:	08000a18 	.word	0x08000a18

080009d4 <_init>:
 80009d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d6:	bf00      	nop
 80009d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009da:	bc08      	pop	{r3}
 80009dc:	469e      	mov	lr, r3
 80009de:	4770      	bx	lr

080009e0 <_fini>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	bf00      	nop
 80009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e6:	bc08      	pop	{r3}
 80009e8:	469e      	mov	lr, r3
 80009ea:	4770      	bx	lr
