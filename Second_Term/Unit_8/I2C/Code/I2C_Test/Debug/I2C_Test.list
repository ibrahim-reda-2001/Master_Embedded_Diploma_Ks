
I2C_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000efc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800102c  0800102c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800105c  0800105c  00011064  2**0
                  CONTENTS
  4 .ARM          00000000  0800105c  0800105c  00011064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800105c  08001064  00011064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800105c  0800105c  0001105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001060  08001060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  08001064  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001064  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d75  00000000  00000000  0001108d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b36  00000000  00000000  00012e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000104e  00000000  00000000  00013938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a0  00000000  00000000  00014988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000218  00000000  00000000  00014c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010a5  00000000  00000000  00014e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020b2  00000000  00000000  00015ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000083ed  00000000  00000000  00017f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000085c  00000000  00000000  000203d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001014 	.word	0x08001014

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001014 	.word	0x08001014

08000170 <HAL_EEPROM_Init>:
#include "EEPROM_Interface.h"
#include "../../MCAL/I2C/I2C_Interface.h"

void HAL_EEPROM_Init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	//PB6 : I2C1_SCL
	//PB7 : I2C1_SDA
	I2C_InitTypeDef I2C1CFG;
	I2C1CFG.I2C_ACK_Control=I2C_ACK_ENable;
 8000176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017a:	61bb      	str	r3, [r7, #24]
	I2C1CFG.I2C_Speed=I2C_SCLK_SM_100K;
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <HAL_EEPROM_Init+0x34>)
 800017e:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode=I2C_Modde;
 8000180:	2300      	movs	r3, #0
 8000182:	60bb      	str	r3, [r7, #8]
	I2C1CFG.P_Slave_Event_CallBack=NULL_POINTER;
 8000184:	2300      	movs	r3, #0
 8000186:	61fb      	str	r3, [r7, #28]
	I2C1CFG.Stretch_Mode=I2C_Stretch_Mode_Enable;
 8000188:	2300      	movs	r3, #0
 800018a:	607b      	str	r3, [r7, #4]
	MCAL_I2C_Set_Pins(I2C1_Reg);
 800018c:	4806      	ldr	r0, [pc, #24]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800018e:	f000 fb91 	bl	80008b4 <MCAL_I2C_Set_Pins>
	MCAL_I2C_Init(I2C1_Reg, &I2C1CFG);
 8000192:	463b      	mov	r3, r7
 8000194:	4619      	mov	r1, r3
 8000196:	4804      	ldr	r0, [pc, #16]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000198:	f000 fa86 	bl	80006a8 <MCAL_I2C_Init>

	}
 800019c:	bf00      	nop
 800019e:	3720      	adds	r7, #32
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	000186a0 	.word	0x000186a0
 80001a8:	40005400 	.word	0x40005400

080001ac <HAL_EEPROM_Write_NByte>:
u8 HAL_EEPROM_Write_NByte(u32 MemoryAddress,u8* Bytes,u8 Data_Length){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b0c8      	sub	sp, #288	; 0x120
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001c4:	6019      	str	r1, [r3, #0]
 80001c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ca:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80001ce:	701a      	strb	r2, [r3, #0]
	u8 buffer[256];
	//EEPROM_Slave_Address  0x2A
	buffer[0]=(u8)(MemoryAddress>>8);//upper address
 80001d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	0a1b      	lsrs	r3, r3, #8
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001e6:	701a      	strb	r2, [r3, #0]
	buffer[1]=(u8)(MemoryAddress);//lower address
 80001e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001fc:	705a      	strb	r2, [r3, #1]
	for (int i=2;i<Data_Length+2;i++){
 80001fe:	2302      	movs	r3, #2
 8000200:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000204:	e017      	b.n	8000236 <HAL_EEPROM_Write_NByte+0x8a>
		buffer[i]=Bytes[i-2];
 8000206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800020a:	3b02      	subs	r3, #2
 800020c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000210:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800021e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8000222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000226:	4413      	add	r3, r2
 8000228:	460a      	mov	r2, r1
 800022a:	701a      	strb	r2, [r3, #0]
	for (int i=2;i<Data_Length+2;i++){
 800022c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000230:	3301      	adds	r3, #1
 8000232:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800023a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	3301      	adds	r3, #1
 8000242:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000246:	429a      	cmp	r2, r3
 8000248:	dddd      	ble.n	8000206 <HAL_EEPROM_Write_NByte+0x5a>
	}


	MCAL_I2C_Master_TX(I2C1_Reg, EEPROM_Slave_Address, buffer, Data_Length+2, With_Stop, WithoutRepeatStart);
 800024a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800024e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3302      	adds	r3, #2
 8000256:	b2db      	uxtb	r3, r3
 8000258:	f107 0214 	add.w	r2, r7, #20
 800025c:	2100      	movs	r1, #0
 800025e:	9101      	str	r1, [sp, #4]
 8000260:	2101      	movs	r1, #1
 8000262:	9100      	str	r1, [sp, #0]
 8000264:	215d      	movs	r1, #93	; 0x5d
 8000266:	4804      	ldr	r0, [pc, #16]	; (8000278 <HAL_EEPROM_Write_NByte+0xcc>)
 8000268:	f000 fc34 	bl	8000ad4 <MCAL_I2C_Master_TX>
	return 0;
 800026c:	2300      	movs	r3, #0
}
 800026e:	4618      	mov	r0, r3
 8000270:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40005400 	.word	0x40005400

0800027c <HAL_EEPROM_Read_NByte>:
u8 HAL_EEPROM_Read_NByte(u32 MemoryAddress,u8* DataOut,u8 Data_Length){
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af02      	add	r7, sp, #8
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	71fb      	strb	r3, [r7, #7]
	u8 buffer[2];
	buffer[0]=(u8)(MemoryAddress>>8);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	b2db      	uxtb	r3, r3
 8000290:	753b      	strb	r3, [r7, #20]
	buffer[1]=(u8)(MemoryAddress);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	757b      	strb	r3, [r7, #21]
	MCAL_I2C_Master_TX(I2C1_Reg, EEPROM_Slave_Address, buffer, 2, With_Stop, WithoutRepeatStart);//this for specific address
 8000298:	f107 0214 	add.w	r2, r7, #20
 800029c:	2300      	movs	r3, #0
 800029e:	9301      	str	r3, [sp, #4]
 80002a0:	2301      	movs	r3, #1
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	2302      	movs	r3, #2
 80002a6:	215d      	movs	r1, #93	; 0x5d
 80002a8:	4808      	ldr	r0, [pc, #32]	; (80002cc <HAL_EEPROM_Read_NByte+0x50>)
 80002aa:	f000 fc13 	bl	8000ad4 <MCAL_I2C_Master_TX>
	MCAL_I2C_Master_RX(I2C1_Reg, EEPROM_Slave_Address, DataOut, Data_Length, With_Stop, WithRepeatStart);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2201      	movs	r2, #1
 80002b2:	9201      	str	r2, [sp, #4]
 80002b4:	2201      	movs	r2, #1
 80002b6:	9200      	str	r2, [sp, #0]
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	215d      	movs	r1, #93	; 0x5d
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <HAL_EEPROM_Read_NByte+0x50>)
 80002be:	f000 fc5f 	bl	8000b80 <MCAL_I2C_Master_RX>

return 0;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3718      	adds	r7, #24
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40005400 	.word	0x40005400

080002d0 <MDIO_voidSetPinDirection>:
#include "../../LIP/BIT_MATH.h"
#include "DIO_interface.h"
#include "DIO_config.h"
#include "DIO_private.h"
void MDIO_voidSetPinDirection  ( u8 Copy_u8Port , u8 Copy_u8Pin, u8 u8Copy_u8Mode)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	460b      	mov	r3, r1
 80002dc:	71bb      	strb	r3, [r7, #6]
 80002de:	4613      	mov	r3, r2
 80002e0:	717b      	strb	r3, [r7, #5]
switch(Copy_u8Port)	{
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	f000 8082 	beq.w	80003ee <MDIO_voidSetPinDirection+0x11e>
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	f300 80c0 	bgt.w	8000470 <MDIO_voidSetPinDirection+0x1a0>
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d002      	beq.n	80002fa <MDIO_voidSetPinDirection+0x2a>
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d03e      	beq.n	8000376 <MDIO_voidSetPinDirection+0xa6>
			GPIOC->CRH&=~(0b1111<<4*Copy_u8Pin)	;
			GPIOC->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
		}
	break;
}
}
 80002f8:	e0ba      	b.n	8000470 <MDIO_voidSetPinDirection+0x1a0>
	if(Copy_u8Pin<=7){
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	2b07      	cmp	r3, #7
 80002fe:	d817      	bhi.n	8000330 <MDIO_voidSetPinDirection+0x60>
	GPIOA->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 8000300:	4b5e      	ldr	r3, [pc, #376]	; (800047c <MDIO_voidSetPinDirection+0x1ac>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	79ba      	ldrb	r2, [r7, #6]
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	210f      	movs	r1, #15
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	43d2      	mvns	r2, r2
 8000310:	4611      	mov	r1, r2
 8000312:	4a5a      	ldr	r2, [pc, #360]	; (800047c <MDIO_voidSetPinDirection+0x1ac>)
 8000314:	400b      	ands	r3, r1
 8000316:	6013      	str	r3, [r2, #0]
	GPIOA->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 8000318:	4b58      	ldr	r3, [pc, #352]	; (800047c <MDIO_voidSetPinDirection+0x1ac>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	7979      	ldrb	r1, [r7, #5]
 800031e:	79ba      	ldrb	r2, [r7, #6]
 8000320:	0092      	lsls	r2, r2, #2
 8000322:	fa01 f202 	lsl.w	r2, r1, r2
 8000326:	4611      	mov	r1, r2
 8000328:	4a54      	ldr	r2, [pc, #336]	; (800047c <MDIO_voidSetPinDirection+0x1ac>)
 800032a:	430b      	orrs	r3, r1
 800032c:	6013      	str	r3, [r2, #0]
	break;
 800032e:	e09a      	b.n	8000466 <MDIO_voidSetPinDirection+0x196>
	else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	2b07      	cmp	r3, #7
 8000334:	f240 8097 	bls.w	8000466 <MDIO_voidSetPinDirection+0x196>
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2b0f      	cmp	r3, #15
 800033c:	f200 8093 	bhi.w	8000466 <MDIO_voidSetPinDirection+0x196>
		Copy_u8Pin-=8;
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	3b08      	subs	r3, #8
 8000344:	71bb      	strb	r3, [r7, #6]
		GPIOA->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 8000346:	4b4d      	ldr	r3, [pc, #308]	; (800047c <MDIO_voidSetPinDirection+0x1ac>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	0092      	lsls	r2, r2, #2
 800034e:	210f      	movs	r1, #15
 8000350:	fa01 f202 	lsl.w	r2, r1, r2
 8000354:	43d2      	mvns	r2, r2
 8000356:	4611      	mov	r1, r2
 8000358:	4a48      	ldr	r2, [pc, #288]	; (800047c <MDIO_voidSetPinDirection+0x1ac>)
 800035a:	400b      	ands	r3, r1
 800035c:	6053      	str	r3, [r2, #4]
		GPIOA->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 800035e:	4b47      	ldr	r3, [pc, #284]	; (800047c <MDIO_voidSetPinDirection+0x1ac>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	7979      	ldrb	r1, [r7, #5]
 8000364:	79ba      	ldrb	r2, [r7, #6]
 8000366:	0092      	lsls	r2, r2, #2
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	4611      	mov	r1, r2
 800036e:	4a43      	ldr	r2, [pc, #268]	; (800047c <MDIO_voidSetPinDirection+0x1ac>)
 8000370:	430b      	orrs	r3, r1
 8000372:	6053      	str	r3, [r2, #4]
	break;
 8000374:	e077      	b.n	8000466 <MDIO_voidSetPinDirection+0x196>
	if(Copy_u8Pin<=7){
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	2b07      	cmp	r3, #7
 800037a:	d817      	bhi.n	80003ac <MDIO_voidSetPinDirection+0xdc>
		GPIOB->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 800037c:	4b40      	ldr	r3, [pc, #256]	; (8000480 <MDIO_voidSetPinDirection+0x1b0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	79ba      	ldrb	r2, [r7, #6]
 8000382:	0092      	lsls	r2, r2, #2
 8000384:	210f      	movs	r1, #15
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	43d2      	mvns	r2, r2
 800038c:	4611      	mov	r1, r2
 800038e:	4a3c      	ldr	r2, [pc, #240]	; (8000480 <MDIO_voidSetPinDirection+0x1b0>)
 8000390:	400b      	ands	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
		GPIOB->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 8000394:	4b3a      	ldr	r3, [pc, #232]	; (8000480 <MDIO_voidSetPinDirection+0x1b0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	7979      	ldrb	r1, [r7, #5]
 800039a:	79ba      	ldrb	r2, [r7, #6]
 800039c:	0092      	lsls	r2, r2, #2
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a36      	ldr	r2, [pc, #216]	; (8000480 <MDIO_voidSetPinDirection+0x1b0>)
 80003a6:	430b      	orrs	r3, r1
 80003a8:	6013      	str	r3, [r2, #0]
	break;
 80003aa:	e05e      	b.n	800046a <MDIO_voidSetPinDirection+0x19a>
		else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	2b07      	cmp	r3, #7
 80003b0:	d95b      	bls.n	800046a <MDIO_voidSetPinDirection+0x19a>
 80003b2:	79bb      	ldrb	r3, [r7, #6]
 80003b4:	2b0f      	cmp	r3, #15
 80003b6:	d858      	bhi.n	800046a <MDIO_voidSetPinDirection+0x19a>
			Copy_u8Pin-=8;
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	3b08      	subs	r3, #8
 80003bc:	71bb      	strb	r3, [r7, #6]
			GPIOB->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 80003be:	4b30      	ldr	r3, [pc, #192]	; (8000480 <MDIO_voidSetPinDirection+0x1b0>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	79ba      	ldrb	r2, [r7, #6]
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	210f      	movs	r1, #15
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	43d2      	mvns	r2, r2
 80003ce:	4611      	mov	r1, r2
 80003d0:	4a2b      	ldr	r2, [pc, #172]	; (8000480 <MDIO_voidSetPinDirection+0x1b0>)
 80003d2:	400b      	ands	r3, r1
 80003d4:	6053      	str	r3, [r2, #4]
			GPIOB->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 80003d6:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <MDIO_voidSetPinDirection+0x1b0>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	7979      	ldrb	r1, [r7, #5]
 80003dc:	79ba      	ldrb	r2, [r7, #6]
 80003de:	0092      	lsls	r2, r2, #2
 80003e0:	fa01 f202 	lsl.w	r2, r1, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a26      	ldr	r2, [pc, #152]	; (8000480 <MDIO_voidSetPinDirection+0x1b0>)
 80003e8:	430b      	orrs	r3, r1
 80003ea:	6053      	str	r3, [r2, #4]
	break;
 80003ec:	e03d      	b.n	800046a <MDIO_voidSetPinDirection+0x19a>
	if(Copy_u8Pin<=7){
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	2b07      	cmp	r3, #7
 80003f2:	d817      	bhi.n	8000424 <MDIO_voidSetPinDirection+0x154>
		GPIOC->CRL&=~(0b1111<<4*Copy_u8Pin)	;//bcause reset value not equal zero
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <MDIO_voidSetPinDirection+0x1b4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	79ba      	ldrb	r2, [r7, #6]
 80003fa:	0092      	lsls	r2, r2, #2
 80003fc:	210f      	movs	r1, #15
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	43d2      	mvns	r2, r2
 8000404:	4611      	mov	r1, r2
 8000406:	4a1f      	ldr	r2, [pc, #124]	; (8000484 <MDIO_voidSetPinDirection+0x1b4>)
 8000408:	400b      	ands	r3, r1
 800040a:	6013      	str	r3, [r2, #0]
		GPIOC->CRL|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 800040c:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <MDIO_voidSetPinDirection+0x1b4>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	7979      	ldrb	r1, [r7, #5]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a19      	ldr	r2, [pc, #100]	; (8000484 <MDIO_voidSetPinDirection+0x1b4>)
 800041e:	430b      	orrs	r3, r1
 8000420:	6013      	str	r3, [r2, #0]
	break;
 8000422:	e024      	b.n	800046e <MDIO_voidSetPinDirection+0x19e>
		else if(Copy_u8Pin>7&&Copy_u8Pin<=15){
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	2b07      	cmp	r3, #7
 8000428:	d921      	bls.n	800046e <MDIO_voidSetPinDirection+0x19e>
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	2b0f      	cmp	r3, #15
 800042e:	d81e      	bhi.n	800046e <MDIO_voidSetPinDirection+0x19e>
			Copy_u8Pin-=8;
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	3b08      	subs	r3, #8
 8000434:	71bb      	strb	r3, [r7, #6]
			GPIOC->CRH&=~(0b1111<<4*Copy_u8Pin)	;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MDIO_voidSetPinDirection+0x1b4>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	79ba      	ldrb	r2, [r7, #6]
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	210f      	movs	r1, #15
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <MDIO_voidSetPinDirection+0x1b4>)
 800044a:	400b      	ands	r3, r1
 800044c:	6053      	str	r3, [r2, #4]
			GPIOC->CRH|=(u8Copy_u8Mode<<4*Copy_u8Pin)	;
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <MDIO_voidSetPinDirection+0x1b4>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	7979      	ldrb	r1, [r7, #5]
 8000454:	79ba      	ldrb	r2, [r7, #6]
 8000456:	0092      	lsls	r2, r2, #2
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a09      	ldr	r2, [pc, #36]	; (8000484 <MDIO_voidSetPinDirection+0x1b4>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6053      	str	r3, [r2, #4]
	break;
 8000464:	e003      	b.n	800046e <MDIO_voidSetPinDirection+0x19e>
	break;
 8000466:	bf00      	nop
 8000468:	e002      	b.n	8000470 <MDIO_voidSetPinDirection+0x1a0>
	break;
 800046a:	bf00      	nop
 800046c:	e000      	b.n	8000470 <MDIO_voidSetPinDirection+0x1a0>
	break;
 800046e:	bf00      	nop
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40010800 	.word	0x40010800
 8000480:	40010c00 	.word	0x40010c00
 8000484:	40011000 	.word	0x40011000

08000488 <EXTI0_IRQHandler>:
}



/****************************************** IRQ ************************************************************/
void EXTI0_IRQHandler(void){
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
//pending request clear by write 1
	EXTI->EXTI_PR|=1<<0;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <EXTI0_IRQHandler+0x1c>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <EXTI0_IRQHandler+0x1c>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <EXTI0_IRQHandler+0x20>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4798      	blx	r3
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40010400 	.word	0x40010400
 80004a8:	2000001c 	.word	0x2000001c

080004ac <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<1;
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <EXTI1_IRQHandler+0x1c>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <EXTI1_IRQHandler+0x1c>)
 80004b6:	f043 0302 	orr.w	r3, r3, #2
 80004ba:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[1]();
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <EXTI1_IRQHandler+0x20>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	4798      	blx	r3
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40010400 	.word	0x40010400
 80004cc:	2000001c 	.word	0x2000001c

080004d0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<2;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <EXTI2_IRQHandler+0x1c>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <EXTI2_IRQHandler+0x1c>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[2]();
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <EXTI2_IRQHandler+0x20>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4798      	blx	r3
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010400 	.word	0x40010400
 80004f0:	2000001c 	.word	0x2000001c

080004f4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<3;
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <EXTI3_IRQHandler+0x1c>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <EXTI3_IRQHandler+0x1c>)
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[3]();
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <EXTI3_IRQHandler+0x20>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4798      	blx	r3
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010400 	.word	0x40010400
 8000514:	2000001c 	.word	0x2000001c

08000518 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	//pending request clear by write 1
		EXTI->EXTI_PR|=1<<4;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <EXTI4_IRQHandler+0x1c>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <EXTI4_IRQHandler+0x1c>)
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[4]();
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <EXTI4_IRQHandler+0x20>)
 800052a:	691b      	ldr	r3, [r3, #16]
 800052c:	4798      	blx	r3
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010400 	.word	0x40010400
 8000538:	2000001c 	.word	0x2000001c

0800053c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
if(EXTI->EXTI_PR&1<<5){EXTI->EXTI_PR|=1<<5;GP_IRQ_CallBack[5]();}
 8000540:	4b26      	ldr	r3, [pc, #152]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	2b00      	cmp	r3, #0
 800054a:	d008      	beq.n	800055e <EXTI9_5_IRQHandler+0x22>
 800054c:	4b23      	ldr	r3, [pc, #140]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a22      	ldr	r2, [pc, #136]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6153      	str	r3, [r2, #20]
 8000558:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <EXTI9_5_IRQHandler+0xa4>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<6){EXTI->EXTI_PR|=1<<6;GP_IRQ_CallBack[6]();}
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000566:	2b00      	cmp	r3, #0
 8000568:	d008      	beq.n	800057c <EXTI9_5_IRQHandler+0x40>
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 8000570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <EXTI9_5_IRQHandler+0xa4>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<7){EXTI->EXTI_PR|=1<<7;GP_IRQ_CallBack[7]();}
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000584:	2b00      	cmp	r3, #0
 8000586:	d008      	beq.n	800059a <EXTI9_5_IRQHandler+0x5e>
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 800058e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000592:	6153      	str	r3, [r2, #20]
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <EXTI9_5_IRQHandler+0xa4>)
 8000596:	69db      	ldr	r3, [r3, #28]
 8000598:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<8){EXTI->EXTI_PR|=1<<8;GP_IRQ_CallBack[8]();}
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d008      	beq.n	80005b8 <EXTI9_5_IRQHandler+0x7c>
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 80005ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <EXTI9_5_IRQHandler+0xa4>)
 80005b4:	6a1b      	ldr	r3, [r3, #32]
 80005b6:	4798      	blx	r3
if(EXTI->EXTI_PR&1<<9){EXTI->EXTI_PR|=1<<9;GP_IRQ_CallBack[9]();}
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d008      	beq.n	80005d6 <EXTI9_5_IRQHandler+0x9a>
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <EXTI9_5_IRQHandler+0xa0>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6153      	str	r3, [r2, #20]
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <EXTI9_5_IRQHandler+0xa4>)
 80005d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d4:	4798      	blx	r3

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010400 	.word	0x40010400
 80005e0:	2000001c 	.word	0x2000001c

080005e4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR&1<<10){EXTI->EXTI_PR|=1<<10;GP_IRQ_CallBack[10]();}
 80005e8:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d008      	beq.n	8000606 <EXTI15_10_IRQHandler+0x22>
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 80005fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fe:	6153      	str	r3, [r2, #20]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <EXTI15_10_IRQHandler+0xc0>)
 8000602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000604:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<11){EXTI->EXTI_PR|=1<<11;GP_IRQ_CallBack[11]();}
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800060e:	2b00      	cmp	r3, #0
 8000610:	d008      	beq.n	8000624 <EXTI15_10_IRQHandler+0x40>
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <EXTI15_10_IRQHandler+0xc0>)
 8000620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000622:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<12){EXTI->EXTI_PR|=1<<12;GP_IRQ_CallBack[12]();}
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800062c:	2b00      	cmp	r3, #0
 800062e:	d008      	beq.n	8000642 <EXTI15_10_IRQHandler+0x5e>
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800063a:	6153      	str	r3, [r2, #20]
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <EXTI15_10_IRQHandler+0xc0>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<13){EXTI->EXTI_PR|=1<<13;GP_IRQ_CallBack[13]();}
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800064a:	2b00      	cmp	r3, #0
 800064c:	d008      	beq.n	8000660 <EXTI15_10_IRQHandler+0x7c>
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <EXTI15_10_IRQHandler+0xc0>)
 800065c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065e:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<14){EXTI->EXTI_PR|=1<<14;GP_IRQ_CallBack[14]();}
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <EXTI15_10_IRQHandler+0x9a>
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6153      	str	r3, [r2, #20]
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <EXTI15_10_IRQHandler+0xc0>)
 800067a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067c:	4798      	blx	r3
	if(EXTI->EXTI_PR&1<<15){EXTI->EXTI_PR|=1<<15;GP_IRQ_CallBack[15]();}
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d008      	beq.n	800069c <EXTI15_10_IRQHandler+0xb8>
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <EXTI15_10_IRQHandler+0xbc>)
 8000690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <EXTI15_10_IRQHandler+0xc0>)
 8000698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069a:	4798      	blx	r3

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40010400 	.word	0x40010400
 80006a4:	2000001c 	.word	0x2000001c

080006a8 <MCAL_I2C_Init>:
/*
 * =====================================================
 *                APIs
 * =====================================================
 */
void MCAL_I2C_Init(I2C_TypeDef* I2Cx,I2C_InitTypeDef* I2C_Struct ){
 80006a8:	b5b0      	push	{r4, r5, r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	volatile u32 tempreg=0,freqrange=0,Fpclk=0,result=0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
	//Enable RCC for I2C
	if(I2Cx==I2C1_Reg){
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a74      	ldr	r2, [pc, #464]	; (8000898 <MCAL_I2C_Init+0x1f0>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10b      	bne.n	80006e2 <MCAL_I2C_Init+0x3a>
		GL_I2C_Config[I2C1_Index]=*I2C_Struct;
 80006ca:	4b74      	ldr	r3, [pc, #464]	; (800089c <MCAL_I2C_Init+0x1f4>)
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	f103 0420 	add.w	r4, r3, #32
 80006d2:	4615      	mov	r5, r2
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80006e0:	e012      	b.n	8000708 <MCAL_I2C_Init+0x60>
//		RCC_voidEnablePeripheralClock(APB1_BUS,I2C1_RCC);
	}
	else if(I2Cx==I2C2_Reg){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a6e      	ldr	r2, [pc, #440]	; (80008a0 <MCAL_I2C_Init+0x1f8>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d10e      	bne.n	8000708 <MCAL_I2C_Init+0x60>
		GL_I2C_Config[I2C2_Index]=*I2C_Struct;
 80006ea:	4b6c      	ldr	r3, [pc, #432]	; (800089c <MCAL_I2C_Init+0x1f4>)
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80006f2:	4615      	mov	r5, r2
 80006f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_voidEnablePeripheralClock(APB1_BUS,I2C2_RCC);
 8000700:	2116      	movs	r1, #22
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fac8 	bl	8000c98 <RCC_voidEnablePeripheralClock>
	}

	if(I2C_Struct->I2C_Mode==I2C_Modde){
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	f040 8086 	bne.w	800081e <MCAL_I2C_Init+0x176>
		/****************************** INit Timing *****************************************/
		//1-Program the peripheral input clock in I2C_CR2 register in order to generate correct timings
		// Bits 5:0 FREQ[5:0]: Peripheral clock frequency =>I2C_CR2
		tempreg|=I2Cx->I2C_CR2;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685a      	ldr	r2, [r3, #4]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	4313      	orrs	r3, r2
 800071a:	617b      	str	r3, [r7, #20]
		//clear FREQ range
		tempreg &=~(I2C_CR2_FREQ_Msk);
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000722:	617b      	str	r3, [r7, #20]
		//Get Fpclk
		Fpclk=RCC_u32GetPClk1Freq();
 8000724:	f000 fb48 	bl	8000db8 <RCC_u32GetPClk1Freq>
 8000728:	4603      	mov	r3, r0
 800072a:	60fb      	str	r3, [r7, #12]
		//set frequency bit
		freqrange=Fpclk/1000000;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4a5d      	ldr	r2, [pc, #372]	; (80008a4 <MCAL_I2C_Init+0x1fc>)
 8000730:	fba2 2303 	umull	r2, r3, r2, r3
 8000734:	0c9b      	lsrs	r3, r3, #18
 8000736:	613b      	str	r3, [r7, #16]
		tempreg|=freqrange;
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	4313      	orrs	r3, r2
 800073e:	617b      	str	r3, [r7, #20]
		I2Cx->I2C_CR2|=tempreg;
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	431a      	orrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	605a      	str	r2, [r3, #4]
		//configure clock control Register(CCR)
		tempreg=0;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
		I2Cx->I2C_CR1&=~(I2C_CR1_PE);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f023 0201 	bic.w	r2, r3, #1
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	601a      	str	r2, [r3, #0]
		if(I2C_Struct->I2C_Speed==I2C_SCLK_SM_50K||I2C_Struct->I2C_Speed==I2C_SCLK_SM_100K){
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000764:	4293      	cmp	r3, r2
 8000766:	d004      	beq.n	8000772 <MCAL_I2C_Init+0xca>
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a4e      	ldr	r2, [pc, #312]	; (80008a8 <MCAL_I2C_Init+0x200>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d11a      	bne.n	80007a8 <MCAL_I2C_Init+0x100>
			//calculate CCR
			result=(u16)((Fpclk)/(I2C_Struct->I2C_Speed<<1));
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	b29b      	uxth	r3, r3
 8000780:	60bb      	str	r3, [r7, #8]
			tempreg|=result;
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	4313      	orrs	r3, r2
 8000788:	617b      	str	r3, [r7, #20]
			I2Cx->I2C_CCR|=tempreg;
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	431a      	orrs	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	61da      	str	r2, [r3, #28]
			tempreg=0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
			/*********** Configure Rise time configuration **************/
			I2Cx->I2C_TRISE|=freqrange+1;
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	621a      	str	r2, [r3, #32]
		}

		/********************** CR1 COnfig *****************/


		tempreg=I2Cx->I2C_CR1;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	617b      	str	r3, [r7, #20]
		tempreg|=(u16)(I2C_Struct->I2C_ACK_Control | I2C_Struct->Stretch_Mode|I2C_Struct->I2C_Mode);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b29a      	uxth	r2, r3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	617b      	str	r3, [r7, #20]
		I2Cx->I2C_CR1=tempreg;
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	601a      	str	r2, [r3, #0]

		/**************************** Slavr ADD configure OAR1 & OAR2 ***************/

		tempreg=0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
		if(I2C_Struct->I2C_Slave_Dvice_ADD.Enable_Dual_ADD_ACK==1){
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	899b      	ldrh	r3, [r3, #12]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d10b      	bne.n	80007fa <MCAL_I2C_Init+0x152>
			tempreg=I2C_OAR2_ENDUAL;
 80007e2:	2301      	movs	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
			//secondary address
			tempreg|=(I2C_Struct->I2C_Slave_Dvice_ADD.Secondary_Slave_ADD<<I2C_OAR2_ADD2_Pos);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	8a1b      	ldrh	r3, [r3, #16]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	461a      	mov	r2, r3
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	617b      	str	r3, [r7, #20]
			tempreg=I2Cx->I2C_OAR2;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	617b      	str	r3, [r7, #20]
		}
		tempreg=0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
		tempreg|=(I2C_Struct->I2C_Slave_Dvice_ADD.Primary_Slave_ADD<<1);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	89db      	ldrh	r3, [r3, #14]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	461a      	mov	r2, r3
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4313      	orrs	r3, r2
 800080a:	617b      	str	r3, [r7, #20]
		tempreg|=(I2C_Struct->I2C_Slave_Dvice_ADD.Addressing_Slave_Mode<<15);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	03da      	lsls	r2, r3, #15
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	4313      	orrs	r3, r2
 8000816:	617b      	str	r3, [r7, #20]
		I2Cx->I2C_OAR1=tempreg;
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	609a      	str	r2, [r3, #8]
	}
	else {
		//SMBus not supported yet
	}
	//interrupt mode  (slave mode) by check callback function != null
	if(I2C_Struct->P_Slave_Event_CallBack!=NULL_POINTER)//that enable IRQ state enable
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d02e      	beq.n	8000884 <MCAL_I2C_Init+0x1dc>
	{

		//Enable IRQ
		I2Cx->I2C_CR2|=(I2C_CR2_ITBUFEN);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2|=(I2C_CR2_ITERREN);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2|=(I2C_CR2_ITEVTEN);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	605a      	str	r2, [r3, #4]
		if(I2Cx==I2C1_Reg){
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MCAL_I2C_Init+0x1f0>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d10c      	bne.n	800086c <MCAL_I2C_Init+0x1c4>
			I2C1_EV_IRQ_Enable;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MCAL_I2C_Init+0x204>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MCAL_I2C_Init+0x204>)
 8000858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085c:	6013      	str	r3, [r2, #0]
			I2C1_ER_IRQ_Enable;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MCAL_I2C_Init+0x208>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MCAL_I2C_Init+0x208>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6013      	str	r3, [r2, #0]
 800086a:	e00b      	b.n	8000884 <MCAL_I2C_Init+0x1dc>
		}
		else{
			I2C2_EV_IRQ_Enable;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MCAL_I2C_Init+0x208>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <MCAL_I2C_Init+0x208>)
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	6013      	str	r3, [r2, #0]
			I2C2_ER_IRQ_Enable;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MCAL_I2C_Init+0x208>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <MCAL_I2C_Init+0x208>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6013      	str	r3, [r2, #0]
		}

	}

	//enable selected I2C Peripheral
	I2Cx->I2C_CR1|=(I2C_CR1_PE);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f043 0201 	orr.w	r2, r3, #1
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]

}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bdb0      	pop	{r4, r5, r7, pc}
 8000898:	40005400 	.word	0x40005400
 800089c:	20000058 	.word	0x20000058
 80008a0:	40005800 	.word	0x40005800
 80008a4:	431bde83 	.word	0x431bde83
 80008a8:	000186a0 	.word	0x000186a0
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000e104 	.word	0xe000e104

080008b4 <MCAL_I2C_Set_Pins>:
		RCC_voidDisablePeripheralClock(APB1_BUS,I2C2_RCC);
		I2C2_EV_IRQ_Disable;
		I2C2_ER_IRQ_Disable;
	}
}
void MCAL_I2C_Set_Pins(I2C_TypeDef* I2Cx){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if(I2Cx==I2C1_Reg){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <MCAL_I2C_Set_Pins+0x4c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d10a      	bne.n	80008da <MCAL_I2C_Set_Pins+0x26>
		// PB6   :I2C clock
		//  PB7   : I2C Data I/O
		MDIO_voidSetPinDirection(DIOB, PIN6, OUTPUT_SPEED_10MHZ_AFOD);
 80008c4:	220d      	movs	r2, #13
 80008c6:	2106      	movs	r1, #6
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff fd01 	bl	80002d0 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(DIOB, PIN7, OUTPUT_SPEED_10MHZ_AFOD);
 80008ce:	220d      	movs	r2, #13
 80008d0:	2107      	movs	r1, #7
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff fcfc 	bl	80002d0 <MDIO_voidSetPinDirection>
		//  PB11   : I2C Data I/O
		MDIO_voidSetPinDirection(DIOB, PIN10, OUTPUT_SPEED_10MHZ_AFOD);
		MDIO_voidSetPinDirection(DIOB, PIN11, OUTPUT_SPEED_10MHZ_AFOD);

	}
}
 80008d8:	e00d      	b.n	80008f6 <MCAL_I2C_Set_Pins+0x42>
	else if(I2Cx==I2C2_Reg){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a09      	ldr	r2, [pc, #36]	; (8000904 <MCAL_I2C_Set_Pins+0x50>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d109      	bne.n	80008f6 <MCAL_I2C_Set_Pins+0x42>
		MDIO_voidSetPinDirection(DIOB, PIN10, OUTPUT_SPEED_10MHZ_AFOD);
 80008e2:	220d      	movs	r2, #13
 80008e4:	210a      	movs	r1, #10
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fcf2 	bl	80002d0 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(DIOB, PIN11, OUTPUT_SPEED_10MHZ_AFOD);
 80008ec:	220d      	movs	r2, #13
 80008ee:	210b      	movs	r1, #11
 80008f0:	2002      	movs	r0, #2
 80008f2:	f7ff fced 	bl	80002d0 <MDIO_voidSetPinDirection>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40005400 	.word	0x40005400
 8000904:	40005800 	.word	0x40005800

08000908 <MCAL_I2C_GenerateStart>:
void MCAL_I2C_GenerateStart(I2C_TypeDef* I2Cx ,FunctionState NewState ,Repeated_Start start ){
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
 8000914:	4613      	mov	r3, r2
 8000916:	70bb      	strb	r3, [r7, #2]

	if (start==WithoutRepeatStart){
 8000918:	78bb      	ldrb	r3, [r7, #2]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d107      	bne.n	800092e <MCAL_I2C_GenerateStart+0x26>
		//check in bus in I2C_SR2
		//		Bit 1 BUSY: Bus busy
		//		0: No communication on the bus
		//		1: Communication ongoing on the bus
		while(MCAL_I2C_GetFlagStatus(I2Cx,I2C_FLAG_BUSY));
 800091e:	bf00      	nop
 8000920:	2100      	movs	r1, #0
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f870 	bl	8000a08 <MCAL_I2C_GetFlagStatus>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f8      	bne.n	8000920 <MCAL_I2C_GenerateStart+0x18>

	}
	if(NewState==Enable){
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d106      	bne.n	8000942 <MCAL_I2C_GenerateStart+0x3a>
		I2Cx->I2C_CR1|=I2C_CR1_START;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	601a      	str	r2, [r3, #0]
	else if(NewState==Disable){
		I2Cx->I2C_CR1&=~I2C_CR1_START;

	}

}
 8000940:	e008      	b.n	8000954 <MCAL_I2C_GenerateStart+0x4c>
	else if(NewState==Disable){
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d105      	bne.n	8000954 <MCAL_I2C_GenerateStart+0x4c>
		I2Cx->I2C_CR1&=~I2C_CR1_START;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <MCAL_I2C_SendAdd>:
void MCAL_I2C_SendAdd(I2C_TypeDef* I2Cx,u16 address, I2C_Direction direction){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
 8000968:	4613      	mov	r3, r2
 800096a:	707b      	strb	r3, [r7, #1]
	//	default 7 bit address
	address<<=1;
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	807b      	strh	r3, [r7, #2]
	if(direction!=I2C_Direction_Transmiter){
 8000972:	787b      	ldrb	r3, [r7, #1]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d004      	beq.n	8000982 <MCAL_I2C_SendAdd+0x26>
		address|=(1<<0);
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	807b      	strh	r3, [r7, #2]
 8000980:	e003      	b.n	800098a <MCAL_I2C_SendAdd+0x2e>
		//this to read
	}
	else{
		address&=~(1<<0);
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	f023 0301 	bic.w	r3, r3, #1
 8000988:	807b      	strh	r3, [r7, #2]
		//this to write
	}
	I2Cx->I2C_DR=address;
 800098a:	887a      	ldrh	r2, [r7, #2]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	611a      	str	r2, [r3, #16]

}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <MCAL_I2C_Generate_Stop>:
void MCAL_I2C_Generate_Stop(I2C_TypeDef* I2Cx,FunctionState state){
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	70fb      	strb	r3, [r7, #3]
	if(state!=Disable){
 80009a6:	78fb      	ldrb	r3, [r7, #3]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <MCAL_I2C_Generate_Stop+0x20>
		I2Cx->I2C_CR1|=I2C_CR1_STOP;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	601a      	str	r2, [r3, #0]
	}
	else{
		I2Cx->I2C_CR1&=~(I2C_CR1_STOP);

	}
}
 80009b8:	e005      	b.n	80009c6 <MCAL_I2C_Generate_Stop+0x2c>
		I2Cx->I2C_CR1&=~(I2C_CR1_STOP);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <MCAL_I2C_Generate_ACK>:
void MCAL_I2C_Generate_ACK(I2C_TypeDef* I2Cx,FunctionState state){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	if(state!=Disable){
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <MCAL_I2C_Generate_ACK+0x20>
		I2Cx->I2C_CR1|=I2C_CR1_ACK;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
	}
	else{
		I2Cx->I2C_CR1&=~(I2C_CR1_ACK);

	}
}
 80009ee:	e005      	b.n	80009fc <MCAL_I2C_Generate_ACK+0x2c>
		I2Cx->I2C_CR1&=~(I2C_CR1_ACK);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
	...

08000a08 <MCAL_I2C_GetFlagStatus>:
FlagStatus MCAL_I2C_GetFlagStatus(I2C_TypeDef* I2Cx,StatusFlagCheck flag){
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	volatile u32 dummy_data=0;//this used to read data from any Register
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
	volatile u32 flag1;
	volatile u32 flag2;
	FlagStatus BitStaus=RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	75fb      	strb	r3, [r7, #23]
	switch (flag){
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d80f      	bhi.n	8000a40 <MCAL_I2C_GetFlagStatus+0x38>
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d84d      	bhi.n	8000ac2 <MCAL_I2C_GetFlagStatus+0xba>
 8000a26:	a201      	add	r2, pc, #4	; (adr r2, 8000a2c <MCAL_I2C_GetFlagStatus+0x24>)
 8000a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2c:	08000a4b 	.word	0x08000a4b
 8000a30:	08000a59 	.word	0x08000a59
 8000a34:	08000a67 	.word	0x08000a67
 8000a38:	08000aa7 	.word	0x08000aa7
 8000a3c:	08000ab5 	.word	0x08000ab5
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <MCAL_I2C_GetFlagStatus+0xc8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d018      	beq.n	8000a7a <MCAL_I2C_GetFlagStatus+0x72>
 8000a48:	e03b      	b.n	8000ac2 <MCAL_I2C_GetFlagStatus+0xba>
	case I2C_FLAG_BUSY:BitStaus=I2Cx->I2C_SR2&I2C_SR2_BUSY;   break;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	75fb      	strb	r3, [r7, #23]
 8000a56:	e034      	b.n	8000ac2 <MCAL_I2C_GetFlagStatus+0xba>
	case EV5:BitStaus=I2Cx->I2C_SR1&I2C_SR1_SB; break;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	75fb      	strb	r3, [r7, #23]
 8000a64:	e02d      	b.n	8000ac2 <MCAL_I2C_GetFlagStatus+0xba>
	case EV6: BitStaus=I2Cx->I2C_SR1&I2C_SR1_ADDR;	dummy_data=I2Cx->I2C_SR2; break;//to clear flag  break;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	75fb      	strb	r3, [r7, #23]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	e023      	b.n	8000ac2 <MCAL_I2C_GetFlagStatus+0xba>
	case MASTER_BYTE_TRANSMITTER:flag1=I2Cx->I2C_SR1;flag2=I2Cx->I2C_SR2;flag2=flag2<<16;BitStaus=(flag1|flag2)&&flag;break;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	041b      	lsls	r3, r3, #16
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d004      	beq.n	8000aa0 <MCAL_I2C_GetFlagStatus+0x98>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MCAL_I2C_GetFlagStatus+0x98>
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e000      	b.n	8000aa2 <MCAL_I2C_GetFlagStatus+0x9a>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	75fb      	strb	r3, [r7, #23]
 8000aa4:	e00d      	b.n	8000ac2 <MCAL_I2C_GetFlagStatus+0xba>
	case EV8: BitStaus=I2Cx->I2C_SR1&I2C_SR1_TXE;break;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ab0:	75fb      	strb	r3, [r7, #23]
 8000ab2:	e006      	b.n	8000ac2 <MCAL_I2C_GetFlagStatus+0xba>
	case EV7:BitStaus=I2Cx->I2C_SR1&I2C_SR1_RXNE;break;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	75fb      	strb	r3, [r7, #23]
 8000ac0:	bf00      	nop
	}
	return BitStaus;
 8000ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	00070080 	.word	0x00070080

08000ad4 <MCAL_I2C_Master_TX>:
void MCAL_I2C_Master_TX(I2C_TypeDef* I2Cx,u16 Device_Addr,u8* DataOut,u8 DataLength,StopCondition stop,Repeated_Start start ){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	817b      	strh	r3, [r7, #10]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	727b      	strb	r3, [r7, #9]
	//1-send start bit in I2C CR1 to generate start condition
	//to do ad timeout for void MCAL_I2C_GenerateStart configure timer with specefic duration when time end timer fire interrupt
	//timer interrupt service routine rise a flag
	//and in while checking for flag
	MCAL_I2C_GenerateStart(I2Cx,Enable,start);
 8000ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aec:	461a      	mov	r2, r3
 8000aee:	2101      	movs	r1, #1
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ff09 	bl	8000908 <MCAL_I2C_GenerateStart>
	//2-EV5 is Bit 0 SB: Start bit (Master mode) then write on data register address
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!(MCAL_I2C_GetFlagStatus(I2Cx, EV5)));
 8000af6:	bf00      	nop
 8000af8:	2101      	movs	r1, #1
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff ff84 	bl	8000a08 <MCAL_I2C_GetFlagStatus>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f8      	beq.n	8000af8 <MCAL_I2C_Master_TX+0x24>
	//3-Send Address
	MCAL_I2C_SendAdd(I2Cx,Device_Addr,I2C_Direction_Transmiter);
 8000b06:	897b      	ldrh	r3, [r7, #10]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f7ff ff25 	bl	800095c <MCAL_I2C_SendAdd>
	//4-EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(MCAL_I2C_GetFlagStatus(I2Cx, EV6)));
 8000b12:	bf00      	nop
 8000b14:	2102      	movs	r1, #2
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff ff76 	bl	8000a08 <MCAL_I2C_GetFlagStatus>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f8      	beq.n	8000b14 <MCAL_I2C_Master_TX+0x40>
	//	4-check master , busy   ,transmitter and TXE empty
	while(!(MCAL_I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTER)));
 8000b22:	bf00      	nop
 8000b24:	4915      	ldr	r1, [pc, #84]	; (8000b7c <MCAL_I2C_Master_TX+0xa8>)
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff ff6e 	bl	8000a08 <MCAL_I2C_GetFlagStatus>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f8      	beq.n	8000b24 <MCAL_I2C_Master_TX+0x50>
	//5-write data
	for(int i=0;i<DataLength;i++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e011      	b.n	8000b5c <MCAL_I2C_Master_TX+0x88>
		//write on data register and wait for ACK EV8
		I2Cx->I2C_DR=DataOut[i];
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	611a      	str	r2, [r3, #16]
		//		EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register .
		while(!(MCAL_I2C_GetFlagStatus(I2Cx, EV8)));
 8000b46:	bf00      	nop
 8000b48:	2103      	movs	r1, #3
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff ff5c 	bl	8000a08 <MCAL_I2C_GetFlagStatus>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f8      	beq.n	8000b48 <MCAL_I2C_Master_TX+0x74>
	for(int i=0;i<DataLength;i++){
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	7a7b      	ldrb	r3, [r7, #9]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbe9      	blt.n	8000b38 <MCAL_I2C_Master_TX+0x64>

	}

	//EV8_2
	//while(!(MCAL_I2C_GetFlagStatus(I2Cx, EV8_2)));
if(stop== With_Stop){
 8000b64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d103      	bne.n	8000b74 <MCAL_I2C_Master_TX+0xa0>
	MCAL_I2C_Generate_Stop(I2Cx, Enable);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff ff13 	bl	800099a <MCAL_I2C_Generate_Stop>
}

}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	00070080 	.word	0x00070080

08000b80 <MCAL_I2C_Master_RX>:
void MCAL_I2C_Master_RX(I2C_TypeDef* I2Cx,u16 Device_Addr,u8* DataOut,u8 DataLength,StopCondition stop,Repeated_Start start ){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	817b      	strh	r3, [r7, #10]
 8000b90:	4613      	mov	r3, r2
 8000b92:	727b      	strb	r3, [r7, #9]
	//send start bit
	u8 index= I2Cx==I2C1_Reg?I2C1_Index:I2C2_Index;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4a30      	ldr	r2, [pc, #192]	; (8000c58 <MCAL_I2C_Master_RX+0xd8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d101      	bne.n	8000ba0 <MCAL_I2C_Master_RX+0x20>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <MCAL_I2C_Master_RX+0x22>
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	74fb      	strb	r3, [r7, #19]
	MCAL_I2C_GenerateStart(I2Cx,Enable,start);
 8000ba4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2101      	movs	r1, #1
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff feab 	bl	8000908 <MCAL_I2C_GenerateStart>
	//2-EV5 is Bit 0 SB: Start bit (Master mode) then write on data register address
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!(MCAL_I2C_GetFlagStatus(I2Cx, EV5)));
 8000bb2:	bf00      	nop
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff ff26 	bl	8000a08 <MCAL_I2C_GetFlagStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f8      	beq.n	8000bb4 <MCAL_I2C_Master_RX+0x34>
	//3-Send Address
	MCAL_I2C_SendAdd(I2Cx,Device_Addr,I2C_Direction_Reciver);
 8000bc2:	897b      	ldrh	r3, [r7, #10]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fec7 	bl	800095c <MCAL_I2C_SendAdd>
	//4-EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(MCAL_I2C_GetFlagStatus(I2Cx, EV6)));
 8000bce:	bf00      	nop
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff ff18 	bl	8000a08 <MCAL_I2C_GetFlagStatus>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f8      	beq.n	8000bd0 <MCAL_I2C_Master_RX+0x50>
	MCAL_I2C_Generate_ACK(I2Cx, Enable);
 8000bde:	2101      	movs	r1, #1
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f7ff fef5 	bl	80009d0 <MCAL_I2C_Generate_ACK>

	if(DataLength){
 8000be6:	7a7b      	ldrb	r3, [r7, #9]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d01c      	beq.n	8000c26 <MCAL_I2C_Master_RX+0xa6>
		for(int i=DataLength;i>1;i--){
 8000bec:	7a7b      	ldrb	r3, [r7, #9]
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e012      	b.n	8000c18 <MCAL_I2C_Master_RX+0x98>

			while(!(MCAL_I2C_GetFlagStatus(I2Cx, EV7)));
 8000bf2:	bf00      	nop
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f7ff ff06 	bl	8000a08 <MCAL_I2C_GetFlagStatus>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f8      	beq.n	8000bf4 <MCAL_I2C_Master_RX+0x74>
			*DataOut=I2Cx->I2C_DR;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	701a      	strb	r2, [r3, #0]
			DataOut++;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
		for(int i=DataLength;i>1;i--){
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	dce9      	bgt.n	8000bf2 <MCAL_I2C_Master_RX+0x72>
		}
		MCAL_I2C_Generate_ACK(I2Cx, Disable);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff fed5 	bl	80009d0 <MCAL_I2C_Generate_ACK>

	}
	if(stop==With_Stop)
 8000c26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d103      	bne.n	8000c36 <MCAL_I2C_Master_RX+0xb6>
		MCAL_I2C_Generate_Stop(I2Cx, Enable);
 8000c2e:	2101      	movs	r1, #1
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff feb2 	bl	800099a <MCAL_I2C_Generate_Stop>

	if(GL_I2C_Config[index].I2C_ACK_Control==I2C_ACK_ENable){
 8000c36:	7cfb      	ldrb	r3, [r7, #19]
 8000c38:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <MCAL_I2C_Master_RX+0xdc>)
 8000c3a:	015b      	lsls	r3, r3, #5
 8000c3c:	4413      	add	r3, r2
 8000c3e:	3318      	adds	r3, #24
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c46:	d103      	bne.n	8000c50 <MCAL_I2C_Master_RX+0xd0>
		MCAL_I2C_Generate_ACK(I2Cx, Enable);
 8000c48:	2101      	movs	r1, #1
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff fec0 	bl	80009d0 <MCAL_I2C_Generate_ACK>

	}

}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	20000058 	.word	0x20000058

08000c60 <I2C1_EV_IRQHandler>:
I2Cx->I2C_DR=data;
}
u8 MCAL_I2C_Slave_Recive(I2C_TypeDef* I2Cx){
return (u8)I2Cx->I2C_DR;
}
void I2C1_EV_IRQHandler(){
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <RCC_voidInitSysClock>:
//1110: PLL input clock x 16
//1111: PLL input clock x 16
const u8 Pll_MUL[16]={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16};

void RCC_voidInitSysClock(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
#elif RCC_CLOCK_TYPE == RCC_HSE_RC
	RCC_CR = 0x00050000; /* Enable HSE with bypass */
	RCC_CFGR = 0x00000001;

#elif RCC_CLOCK_TYPE == RCC_HSI
	RCC_CR = 0x00000081; /* Enable HSI + Trimming = 0 */
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <RCC_voidInitSysClock+0x18>)
 8000c7e:	2281      	movs	r2, #129	; 0x81
 8000c80:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0x00000000;
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <RCC_voidInitSysClock+0x1c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
#endif

#else
#error("You chosed Wrong Clock type")
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40021004 	.word	0x40021004

08000c98 <RCC_voidEnablePeripheralClock>:

//==============================================================================================================

void RCC_voidEnablePeripheralClock( u8 Copy_u8BusId , u8 Copy_u8PeripheralId ){
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]



	if (Copy_u8BusId <= 31)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b1f      	cmp	r3, #31
 8000cac:	d82a      	bhi.n	8000d04 <RCC_voidEnablePeripheralClock+0x6c>
	{
		switch( Copy_u8BusId ){
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d01c      	beq.n	8000cee <RCC_voidEnablePeripheralClock+0x56>
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	dc25      	bgt.n	8000d04 <RCC_voidEnablePeripheralClock+0x6c>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <RCC_voidEnablePeripheralClock+0x2a>
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d00b      	beq.n	8000cd8 <RCC_voidEnablePeripheralClock+0x40>
	{
		/* Return Error*/
	}


}
 8000cc0:	e020      	b.n	8000d04 <RCC_voidEnablePeripheralClock+0x6c>
		case AHB_BUS  : SET_BIT( RCC_AHBENR  , Copy_u8PeripheralId ); break;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <RCC_voidEnablePeripheralClock+0x78>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	79ba      	ldrb	r2, [r7, #6]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <RCC_voidEnablePeripheralClock+0x78>)
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e015      	b.n	8000d04 <RCC_voidEnablePeripheralClock+0x6c>
		case APB1_BUS :	SET_BIT( RCC_APB1ENR , Copy_u8PeripheralId ); break;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <RCC_voidEnablePeripheralClock+0x7c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	79ba      	ldrb	r2, [r7, #6]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <RCC_voidEnablePeripheralClock+0x7c>)
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e00a      	b.n	8000d04 <RCC_voidEnablePeripheralClock+0x6c>
		case APB2_BUS : SET_BIT( RCC_APB2ENR , Copy_u8PeripheralId ); break;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <RCC_voidEnablePeripheralClock+0x80>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	79ba      	ldrb	r2, [r7, #6]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <RCC_voidEnablePeripheralClock+0x80>)
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	bf00      	nop
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021014 	.word	0x40021014
 8000d14:	4002101c 	.word	0x4002101c
 8000d18:	40021018 	.word	0x40021018

08000d1c <RCC_u32GetSysClkFreq>:
	case APB2_BUS : CLR_BIT( RCC_APB2ENR , Copy_u8PeripheralId ); break;

	}
}
//==============================================================================================================
u32  RCC_u32GetSysClkFreq( void ){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
u32 j=0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
	//	Set and cleared by hardware to indicate which clock source is used as system clock.
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: not applicable
	switch((RCC_CFGR>>2)&0b11){
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <RCC_u32GetSysClkFreq+0x60>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d00e      	beq.n	8000d52 <RCC_u32GetSysClkFreq+0x36>
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d81a      	bhi.n	8000d6e <RCC_u32GetSysClkFreq+0x52>
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <RCC_u32GetSysClkFreq+0x26>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d004      	beq.n	8000d4a <RCC_u32GetSysClkFreq+0x2e>
 8000d40:	e015      	b.n	8000d6e <RCC_u32GetSysClkFreq+0x52>
	case 0:
		return j=8000000;break;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <RCC_u32GetSysClkFreq+0x64>)
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	e012      	b.n	8000d70 <RCC_u32GetSysClkFreq+0x54>
	case 1:return j=16000000;break;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <RCC_u32GetSysClkFreq+0x68>)
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	e00e      	b.n	8000d70 <RCC_u32GetSysClkFreq+0x54>
	case 2:
		return  j=(4000000*Pll_MUL[(RCC_CFGR>>18)&0b1111]);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <RCC_u32GetSysClkFreq+0x60>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0c9b      	lsrs	r3, r3, #18
 8000d58:	f003 030f 	and.w	r3, r3, #15
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <RCC_u32GetSysClkFreq+0x6c>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <RCC_u32GetSysClkFreq+0x70>)
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	e000      	b.n	8000d70 <RCC_u32GetSysClkFreq+0x54>
		break;
	}
	return j;
 8000d6e:	687b      	ldr	r3, [r7, #4]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021004 	.word	0x40021004
 8000d80:	007a1200 	.word	0x007a1200
 8000d84:	00f42400 	.word	0x00f42400
 8000d88:	0800104c 	.word	0x0800104c
 8000d8c:	003d0900 	.word	0x003d0900

08000d90 <RCC_u32GetHClkFreq>:
//==============================================================================================================
u32  RCC_u32GetHClkFreq( void ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	//	Bits 7:4 HPRE: AHB prescaler
	return (RCC_u32GetSysClkFreq()>>AHB_Prescaler[(RCC_CFGR>>4)&0b1111]);
 8000d94:	f7ff ffc2 	bl	8000d1c <RCC_u32GetSysClkFreq>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <RCC_u32GetHClkFreq+0x20>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	4903      	ldr	r1, [pc, #12]	; (8000db4 <RCC_u32GetHClkFreq+0x24>)
 8000da6:	5ccb      	ldrb	r3, [r1, r3]
 8000da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021004 	.word	0x40021004
 8000db4:	0800103c 	.word	0x0800103c

08000db8 <RCC_u32GetPClk1Freq>:
//==============================================================================================================
u32  RCC_u32GetPClk1Freq( void ){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	//RCC_u8GetHClkFreq -> AHB clock
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (RCC_u32GetHClkFreq()>>APB1or2_Prescaler[(RCC_CFGR>>8)&0b111]);//shift right mean divide
 8000dbc:	f7ff ffe8 	bl	8000d90 <RCC_u32GetHClkFreq>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <RCC_u32GetPClk1Freq+0x20>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	4903      	ldr	r1, [pc, #12]	; (8000ddc <RCC_u32GetPClk1Freq+0x24>)
 8000dce:	5ccb      	ldrb	r3, [r1, r3]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021004 	.word	0x40021004
 8000ddc:	08001034 	.word	0x08001034

08000de0 <SPI1_IRQHandler>:
 * =====================================================
 *                IRQ
 * =====================================================
 */

void SPI1_IRQHandler(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	struct 	SPI_IRQ_Src irq_src;
	irq_src.TXE=Get_Bit(SPI1->SR,1);
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <SPI1_IRQHandler+0x54>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	085b      	lsrs	r3, r3, #1
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	793b      	ldrb	r3, [r7, #4]
 8000df4:	f362 0300 	bfi	r3, r2, #0, #1
 8000df8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE=Get_Bit(SPI1->SR,0);
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <SPI1_IRQHandler+0x54>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	f362 0341 	bfi	r3, r2, #1, #1
 8000e0a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI=Get_Bit(SPI1->SR,4);
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <SPI1_IRQHandler+0x54>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	793b      	ldrb	r3, [r7, #4]
 8000e1a:	f362 0382 	bfi	r3, r2, #2, #1
 8000e1e:	713b      	strb	r3, [r7, #4]

	GL_SPI_Config[SPI1_index]->Ptr_IRQ_CallBack(irq_src);
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SPI1_IRQHandler+0x58>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	7938      	ldrb	r0, [r7, #4]
 8000e28:	4798      	blx	r3
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40013000 	.word	0x40013000
 8000e38:	20000098 	.word	0x20000098

08000e3c <SPI2_IRQHandler>:
void SPI2_IRQHandler(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	struct 	SPI_IRQ_Src irq_src;
	irq_src.TXE=Get_Bit(SPI2->SR,1);
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <SPI2_IRQHandler+0x54>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	085b      	lsrs	r3, r3, #1
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	793b      	ldrb	r3, [r7, #4]
 8000e50:	f362 0300 	bfi	r3, r2, #0, #1
 8000e54:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE=Get_Bit(SPI2->SR,0);
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <SPI2_IRQHandler+0x54>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	793b      	ldrb	r3, [r7, #4]
 8000e62:	f362 0341 	bfi	r3, r2, #1, #1
 8000e66:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI=Get_Bit(SPI2->SR,4);
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <SPI2_IRQHandler+0x54>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	793b      	ldrb	r3, [r7, #4]
 8000e76:	f362 0382 	bfi	r3, r2, #2, #1
 8000e7a:	713b      	strb	r3, [r7, #4]
		GL_SPI_Config[SPI2_index]->Ptr_IRQ_CallBack(irq_src);
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SPI2_IRQHandler+0x58>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	7938      	ldrb	r0, [r7, #4]
 8000e84:	4798      	blx	r3
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40003800 	.word	0x40003800
 8000e94:	20000098 	.word	0x20000098

08000e98 <USART1_IRQHandler>:
}


//call back function
//ISR
void USART1_IRQHandler(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	GL_USART_Config->P_IRQ_CallBack();
 8000e9c:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <USART1_IRQHandler+0x10>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	4798      	blx	r3
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200000a0 	.word	0x200000a0

08000eac <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <clock_init>:
#include "Stm32f103c6_Drivers/MCAL/USART/USART_interface.h"
#include "Stm32f103c6_Drivers/MCAL/SPI/SPI_config.h"
#include "Stm32f103c6_Drivers/MCAL/SPI/SPI_interface.h"
#include "Stm32f103c6_Drivers/HAL/EEPROM/EEPROM_Interface.h"

void clock_init(void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8000ebc:	f7ff fedc 	bl	8000c78 <RCC_voidInitSysClock>
	//enable RCC for USART1
	RCC_voidEnablePeripheralClock(APB2_BUS, USART1_RCC);
 8000ec0:	210e      	movs	r1, #14
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f7ff fee8 	bl	8000c98 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(APB2_BUS, DIOA_RCC);
 8000ec8:	2102      	movs	r1, #2
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f7ff fee4 	bl	8000c98 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(APB2_BUS, DIOB_RCC);
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f7ff fee0 	bl	8000c98 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(APB1_BUS, I2C1_RCC);
 8000ed8:	2115      	movs	r1, #21
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff fedc 	bl	8000c98 <RCC_voidEnablePeripheralClock>

	RCC_voidEnablePeripheralClock(APB2_BUS, AFIO_RCC);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff fed8 	bl	8000c98 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(APB2_BUS, SPI1_RCC);
 8000ee8:	210c      	movs	r1, #12
 8000eea:	2002      	movs	r0, #2
 8000eec:	f7ff fed4 	bl	8000c98 <RCC_voidEnablePeripheralClock>


}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <main>:

int main(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 clock_init();
 8000efa:	f7ff ffdd 	bl	8000eb8 <clock_init>
u8 ch1[7]={0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <main+0x80>)
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f08:	6018      	str	r0, [r3, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	8019      	strh	r1, [r3, #0]
 8000f0e:	3302      	adds	r3, #2
 8000f10:	0c0a      	lsrs	r2, r1, #16
 8000f12:	701a      	strb	r2, [r3, #0]
u8 ch2[7]={0};
 8000f14:	2300      	movs	r3, #0
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	801a      	strh	r2, [r3, #0]
 8000f20:	460a      	mov	r2, r1
 8000f22:	709a      	strb	r2, [r3, #2]
HAL_EEPROM_Init();
 8000f24:	f7ff f924 	bl	8000170 <HAL_EEPROM_Init>
HAL_EEPROM_Write_NByte(0xAF, ch1, 7);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	20af      	movs	r0, #175	; 0xaf
 8000f32:	f7ff f93b 	bl	80001ac <HAL_EEPROM_Write_NByte>
HAL_EEPROM_Read_NByte(0XAF, ch2, 7);
 8000f36:	463b      	mov	r3, r7
 8000f38:	2207      	movs	r2, #7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	20af      	movs	r0, #175	; 0xaf
 8000f3e:	f7ff f99d 	bl	800027c <HAL_EEPROM_Read_NByte>

//test case 2
ch1[0]=0xA;
 8000f42:	230a      	movs	r3, #10
 8000f44:	723b      	strb	r3, [r7, #8]
ch1[1]=0xB;
 8000f46:	230b      	movs	r3, #11
 8000f48:	727b      	strb	r3, [r7, #9]
ch1[2]=0xC;
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	72bb      	strb	r3, [r7, #10]
ch1[3]=0xD;
 8000f4e:	230d      	movs	r3, #13
 8000f50:	72fb      	strb	r3, [r7, #11]
HAL_EEPROM_Write_NByte(0xFFF, ch1, 4);
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2204      	movs	r2, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f5e:	f7ff f925 	bl	80001ac <HAL_EEPROM_Write_NByte>
HAL_EEPROM_Read_NByte(0XFFF, ch1, 4);
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2204      	movs	r2, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f6e:	f7ff f985 	bl	800027c <HAL_EEPROM_Read_NByte>




	while(1){
 8000f72:	e7fe      	b.n	8000f72 <main+0x7e>
 8000f74:	0800102c 	.word	0x0800102c

08000f78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	; (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	; (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fa6:	f000 f811 	bl	8000fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000faa:	f7ff ffa3 	bl	8000ef4 <main>

08000fae <LoopForever>:

LoopForever:
  b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   r0, =_estack
 8000fb0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fbc:	08001064 	.word	0x08001064
  ldr r2, =_sbss
 8000fc0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fc4:	200000a4 	.word	0x200000a4

08000fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_2_IRQHandler>
	...

08000fcc <__libc_init_array>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4d0c      	ldr	r5, [pc, #48]	; (8001004 <__libc_init_array+0x38>)
 8000fd2:	4c0d      	ldr	r4, [pc, #52]	; (8001008 <__libc_init_array+0x3c>)
 8000fd4:	1b64      	subs	r4, r4, r5
 8000fd6:	10a4      	asrs	r4, r4, #2
 8000fd8:	42a6      	cmp	r6, r4
 8000fda:	d109      	bne.n	8000ff0 <__libc_init_array+0x24>
 8000fdc:	f000 f81a 	bl	8001014 <_init>
 8000fe0:	2600      	movs	r6, #0
 8000fe2:	4d0a      	ldr	r5, [pc, #40]	; (800100c <__libc_init_array+0x40>)
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	; (8001010 <__libc_init_array+0x44>)
 8000fe6:	1b64      	subs	r4, r4, r5
 8000fe8:	10a4      	asrs	r4, r4, #2
 8000fea:	42a6      	cmp	r6, r4
 8000fec:	d105      	bne.n	8000ffa <__libc_init_array+0x2e>
 8000fee:	bd70      	pop	{r4, r5, r6, pc}
 8000ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff4:	4798      	blx	r3
 8000ff6:	3601      	adds	r6, #1
 8000ff8:	e7ee      	b.n	8000fd8 <__libc_init_array+0xc>
 8000ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffe:	4798      	blx	r3
 8001000:	3601      	adds	r6, #1
 8001002:	e7f2      	b.n	8000fea <__libc_init_array+0x1e>
 8001004:	0800105c 	.word	0x0800105c
 8001008:	0800105c 	.word	0x0800105c
 800100c:	0800105c 	.word	0x0800105c
 8001010:	08001060 	.word	0x08001060

08001014 <_init>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr

08001020 <_fini>:
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001022:	bf00      	nop
 8001024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001026:	bc08      	pop	{r3}
 8001028:	469e      	mov	lr, r3
 800102a:	4770      	bx	lr
